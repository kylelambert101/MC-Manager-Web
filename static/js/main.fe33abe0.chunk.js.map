{"version":3,"sources":["utils/ArrayUtilities.ts","utils/ObjectUtilities.ts","utils/CSVUtilities.ts","utils/FileUtilities.ts","utils/StringUtilities.ts","contexts/ViewOptionsContext.tsx","contexts/SongDataContext.tsx","components/ConfirmDialog.tsx","utils/DetailsListUtilities.tsx","components/ActiveCheckbox.tsx","components/SongDataList.tsx","components/dialogs/AddCSVSongsDialog.tsx","components/dialogs/ViewOptionsDialog.tsx","components/dialogs/PopupModal.tsx","components/HeaderCommandBar.tsx","components/MusicView.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["areIdenticalArrays","arr1","arr2","options","ignoreOrder","JSON","stringify","sort","getProperties","object","Object","keys","map","key","name","dataType","expectedCSVColumnOrder","songDataFields","ACTIVE","DATE","DAY","TITLE","NEW_FILE_NAME","ORIGINAL_FILE_NAME","ORIGINAL_FILE_PATH","FILE_EXTENSION","ARTIST","ALBUM","ALBUM_ARTIST","TRACK_NUMBER","TRACK_TOTAL","DURATION","isCSVHeaderValid","header","column","csvHeaderName","getCSVRowsFromString","csvString","Papa","data","parseSongDataFromCSVRow","csvRow","rowNum","length","reduce","song","value","index","cleanedValue","targetField","Number","Boolean","id","parseCSVFile","fileContents","a","datarows","Error","pop","row","filter","item","isDefinedString","s","undefined","defaultViewOptions","fadeInactive","hiddenColumns","ID","ViewOptionsContext","React","viewOptions","setViewOptions","sortColumns","toggleSortColumn","resetSorting","ViewOptionsContextProvider","children","setSortColumns","columnField","find","c","fieldName","prevSortColumns","direction","sc","console","table","state","Provider","useViewOptionsContext","SongDataContext","file","isLoading","isDirty","songs","loadFileData","saveFileData","cancelChanges","updateSong","addNewSongs","SongDataContextProvider","setFile","isLoadingFile","setIsLoadingFile","isParsingData","setIsParsingData","rawCSVText","setRawCSVText","setSongs","cachedSongs","setCachedSongs","inputRef","reader","FileReader","onload","e","text","target","result","readAsText","fetchData","parsed","parseData","previousSongs","objList","sortFields","newList","forEach","field","b","Reflect","get","sortObjectListByFields","current","click","prevSongs","new_file_name","newSongs","minId","Math","min","toAdd","style","display","accept","ref","onChange","files","currentTarget","type","useSongDataContext","ConfirmDialog","props","visible","setVisible","message","title","onConfirm","onCancel","confirmAltText","cancelAltText","dialogContentProps","DialogType","normal","closeButtonAriaLabel","subText","Dialog","hidden","onDismiss","DialogFooter","Stack","horizontal","horizontalAlign","tokens","childrenGap","PrimaryButton","onClick","DefaultButton","getColumnsFromObjectArray","objects","obj","flat","self","indexOf","itemString","parse","displayName","matchingSongDataField","k","f","replace","split","word","toUpperCase","substr","toLowerCase","join","getDisplayName","uniqueValueLengths","getUniqueValuesByField","defaultColumnSize","max","minWidth","isResizable","isCollapsable","onRender","ActiveCheckbox","active","Checkbox","checked","boxSide","styles","root","marginLeft","SongDataList","onSongChange","onColumnClick","items","columns","date","day","original_file_name","original_file_path","file_extension","artist","album","album_artist","track_number","track_total","duration","isSorted","isSortedDescending","sortColumn","songData","itemComponent","fieldValue","fontFamily","color","newValue","getFieldAdjustedComponent","some","hc","DetailsList","checkboxVisibility","CheckboxVisibility","onRenderDetailsHeader","headerProps","defaultRender","Sticky","stickyPosition","StickyPositionType","Header","isScrollSynced","paddingTop","onRenderColumnHeaderTooltip","tooltipHostProps","TooltipHost","constrainMode","ConstrainMode","unconstrained","layoutMode","DetailsListLayoutMode","fixedColumns","onRenderRow","rowProps","customStyles","DetailsRow","AddCSVSongsDialog","onSubmit","existingSongs","csvInput","setCSVInput","parsedSongs","setParsedSongs","validSongs","handleCancel","getErrorMessage","invalidRowErrors","invalidRow","r","newFileNames","nfn","duplicateNames","newFileName","count","n","songsAlreadyInFile","fileName","maxWidth","TextField","multiline","autoAdjustHeight","event","csvRows","onGetErrorMessage","disabled","ViewOptionsDialog","pendingViewOptions","setPendingViewOptions","pivotItemStyle","marginTop","Pivot","PivotItem","headerText","label","ev","isChecked","Label","htmlFor","col","columnIsHidden","handleColumnCheckboxChange","theme","getTheme","contentStyles","mergeStyleSets","fonts","xLargePlus","flex","palette","neutralPrimary","alignItems","fontWeight","FontWeights","semibold","padding","PopupModal","Modal","isOpen","isBlocking","className","grow","verticalAlign","overflowProps","ariaLabel","HeaderCommandBar","addToast","useToasts","cancelDialogIsOpen","setCancelDialogIsOpen","addSongDialogIsOpen","setAddSongDialogIsOpen","viewOptionsDialogIsOpen","setViewOptionsDialogIsOpen","testIsOpen","setTestIsOpen","iconProps","iconName","appearance","cacheKey","subMenuProps","farItems","iconOnly","log","CommandBar","overflowButtonProps","newOptions","MusicView","flexDirection","width","position","top","bottom","ScrollablePane","ProgressIndicator","barHeight","newSong","Home","initializeIcons","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe33abe0.chunk.js","sourcesContent":["/**\n * Get a list of all unique values of object.`field` from the\n * list of `objects`\n * @param field Field to query on each object\n * @param objects List from which to aggregate object values\n */\nexport const getUniqueValuesByField = (field: string, objects: any[]): any[] => {\n  // Get all unique values of obj.`field` in the array\n  return (\n    objects\n      // Get all values of object.field\n      .map((obj) => Reflect.get(obj, field))\n      // Filter to unique, defined values\n      .filter((value, index, self) => {\n        return self.indexOf(value) === index && typeof value !== \"undefined\";\n      })\n  );\n};\n\nexport type CompareOptions = {\n  /**\n   * Whether to ignore relative sort order of items in compared arrays\n   */\n  ignoreOrder: boolean;\n};\n\n/**\n * Compare two arrays via simple stringification\n * @param arr1 First array to compare\n * @param arr2 Second array to compare\n * @param options CompareOptions to alter comparison logic\n */\nexport const areIdenticalArrays = (\n  arr1: unknown[],\n  arr2: unknown[],\n  options?: CompareOptions\n): boolean => {\n  if (options?.ignoreOrder) {\n    return JSON.stringify(arr1.sort()) === JSON.stringify(arr2.sort());\n  }\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n};\n\nexport interface SortField {\n  fieldName: string;\n  direction: \"ascending\" | \"descending\";\n}\n\nexport const sortObjectListByFields = (\n  objList: Record<string, unknown>[],\n  sortFields: SortField[]\n): Record<string, unknown>[] => {\n  const newList = [...objList];\n  // Alright this isn't pretty but iteratively apply the sorts\n  sortFields.forEach((field) => {\n    newList.sort((a, b) => {\n      if (Reflect.get(a, field.fieldName) === Reflect.get(b, field.fieldName)) {\n        return 0;\n      }\n      if (field.direction === \"ascending\") {\n        return Reflect.get(a, field.fieldName) > Reflect.get(b, field.fieldName) ? 1 : -1;\n      }\n      return Reflect.get(a, field.fieldName) < Reflect.get(b, field.fieldName) ? 1 : -1;\n    });\n  });\n  return newList;\n};\n","/**\n * Name and dataType of a property on an object\n */\nexport type TypedProperty = {\n  name: string;\n  dataType: string;\n};\n\n/**\n * Get the name and datatype of all properties of an object\n * @param object Object to analyze\n */\nexport const getProperties = (\n  object: Record<string, unknown>\n): TypedProperty[] => {\n  return Object.keys(object).map((key) => ({\n    name: key,\n    dataType: typeof object[key],\n  }));\n};\n","import * as Papa from \"papaparse\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport { SongData, SongDataColumn } from \"../constants/MusicTypes\";\nimport { getProperties } from \"./ObjectUtilities\";\n\nexport const expectedCSVColumnOrder: SongDataColumn[] = [\n  songDataFields.ACTIVE,\n  songDataFields.DATE,\n  songDataFields.DAY,\n  songDataFields.TITLE,\n  songDataFields.NEW_FILE_NAME,\n  songDataFields.ORIGINAL_FILE_NAME,\n  songDataFields.ORIGINAL_FILE_PATH,\n  songDataFields.FILE_EXTENSION,\n  songDataFields.ARTIST,\n  songDataFields.ALBUM,\n  songDataFields.ALBUM_ARTIST,\n  songDataFields.TRACK_NUMBER,\n  songDataFields.TRACK_TOTAL,\n  songDataFields.DURATION,\n];\n\nexport const isCSVHeaderValid = (header: string[]): boolean => {\n  // Check whether header string matches expected column order\n  return (\n    JSON.stringify(header) ===\n    JSON.stringify(expectedCSVColumnOrder.map((column) => column.csvHeaderName))\n  );\n};\n\nexport const getCSVRowsFromString = (csvString: string): string[][] => {\n  return Papa.parse(csvString)?.data || ([] as string[][]);\n};\n\nexport const parseSongDataFromCSVRow = (csvRow: string[], rowNum: number): SongData | undefined => {\n  // If the row doesn't have the right number of columns, don't bother parsing\n  if (csvRow.length !== expectedCSVColumnOrder.length) {\n    return undefined;\n  }\n  /*\n   * I'm making a couple of assumptions here:\n   * 1. Columns are in expected order per expectedCSVColumnOrder above\n   * 2. Fields on SongData match up exactly to those column names\n   *\n   * Assuming those are true, I can build a new SongData object from the array,\n   * using, for each index, the item from expectedCSVColumnOrder as the field name\n   * and the item from csvRow as the value.\n   */\n  return csvRow.reduce(\n    (song, value, index) => {\n      const targetField = expectedCSVColumnOrder[index];\n      // Parse values based on field dataType\n      let cleanedValue;\n      switch (targetField.dataType) {\n        case \"number\":\n          cleanedValue = Number(value);\n          break;\n        case \"boolean\":\n          cleanedValue = Boolean(Number(value));\n          break;\n        default:\n          cleanedValue = value;\n      }\n      return {\n        ...song,\n        [targetField.name]: cleanedValue,\n      };\n    },\n    { id: rowNum } // initial value for \"song\"\n  ) as SongData;\n};\n\nexport const convertSongDataToCSVRow = (song: SongData): string => {\n  // Translate song into an object with writeable CSV data by getting song's properties\n  // and conditionally transforming or removing them\n  const writeableSong = getProperties(song).reduce((wSong, typedProperty) => {\n    // Unpack property information\n    const { name: fieldName, dataType: fieldDataType } = typedProperty;\n    // Get the value of this field from `song`\n    const fieldValue = Reflect.get(song, typedProperty.name);\n\n    // Transform the value based on field datatype\n    let cleanedValue;\n    switch (fieldDataType) {\n      case \"number\":\n        // Replace \"NaN\" with \"None\" for number fields\n        cleanedValue = Number.isNaN(fieldValue) ? \"None\" : fieldValue;\n        break;\n      case \"boolean\":\n        // Convert boolean fields back to numbers\n        cleanedValue = Number(fieldValue);\n        break;\n      default:\n        cleanedValue = fieldValue;\n    }\n\n    // Only add this field to the writeableSong if it is an expected column\n    return expectedCSVColumnOrder.some((column) => column.name === fieldName)\n      ? {\n          ...wSong,\n          [typedProperty.name]: cleanedValue,\n        }\n      : wSong;\n  }, {});\n\n  // Convert writeableSong to a CSV string with no header\n  return Papa.unparse([writeableSong], { header: false });\n};\n\nexport const getDummySongData = (): SongData[] => {\n  return [\n    {\n      id: 1,\n      active: true,\n      date: \"2020-06-01\",\n      day: \"2020-06-01\",\n      title: \"Item 1\",\n      new_file_name: \"item_1.txt\",\n      original_file_name: \"origname\",\n      original_file_path: \"origpath\",\n      file_extension: \"extension\",\n      artist: \"artist\",\n      album: \"album\",\n      album_artist: \"albumartist\",\n      track_number: 1,\n      track_total: 10,\n      duration: 100,\n    },\n    {\n      id: 2,\n      active: false,\n      date: \"2020-06-02\",\n      day: \"2020-06-02\",\n      title: \"Item 2\",\n      new_file_name: \"item_2.txt\",\n      original_file_name: \"origname2\",\n      original_file_path: \"origpath2\",\n      file_extension: \"extension2\",\n      artist: \"artist2\",\n      album: \"album2\",\n      album_artist: \"albumartist2\",\n      track_number: 2,\n      track_total: 10,\n      duration: 200,\n    },\n  ];\n};\n","import { SongData } from \"../constants/MusicTypes\";\nimport {\n  parseSongDataFromCSVRow,\n  isCSVHeaderValid,\n  expectedCSVColumnOrder,\n  convertSongDataToCSVRow,\n  getCSVRowsFromString,\n} from \"./CSVUtilities\";\n\nexport const parseCSVFile = async (fileContents: string): Promise<SongData[]> => {\n  const data = getCSVRowsFromString(fileContents);\n\n  // First row is the header row\n  const [header, ...datarows] = data;\n\n  // Check that header rows are in the right position before processing\n  if (!isCSVHeaderValid(header)) {\n    throw new Error(\"CSV header columns were not in the expected format\");\n  }\n\n  // Pop empty lines at the end of the CSV, if any\n  while (datarows.length > 0 && datarows[datarows.length - 1].length === 1) {\n    datarows.pop();\n  }\n\n  // If there's no data, that's a problem.\n  if (!datarows || datarows.length === 0) {\n    throw new Error(\"No data found in CSV file\");\n  }\n\n  return datarows\n    .map((row: string[], index: number) => parseSongDataFromCSVRow(row, index + 1))\n    .filter((item) => typeof item !== \"undefined\") as SongData[];\n};\n\nexport const saveCSVFile = (targetPath: string, songData: SongData[]): void => {\n  // Create headers using expectedCSVColumnOrder as a base\n  const headers = expectedCSVColumnOrder.map((column) => column.csvHeaderName).join(\",\");\n\n  const csvData = [\n    // Add the headers first\n    headers,\n    // Then add csv rows for each song\n    ...songData.map((song) => convertSongDataToCSVRow(song)),\n  ].join(\"\\n\");\n\n  console.log(String.raw`Saving not implemented. Here's the data though ¯\\_(ツ)_/¯`);\n  console.table(csvData);\n  // TODO Implement this\n};\n","/**\n * Get the title-case version of `str`, with the first letter of\n * each word capitalized\n * @param str\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const convertToTitleCase = (str: string): string => {\n  return str\n    .split(\" \")\n    .map((word) => (word.length > 0 ? word[0].toUpperCase() + word.substr(1).toLowerCase() : word))\n    .join(\" \");\n};\n\nexport const isDefinedString = (s: unknown): s is string =>\n  typeof s === \"string\" && s !== undefined && s != null && s !== \"\";\n","import * as React from \"react\";\nimport { ViewOptions } from \"../constants/MusicTypes\";\nimport { SortField } from \"../utils/ArrayUtilities\";\nimport songDataFields from \"../constants/songDataFields.json\";\n\nconst defaultViewOptions: ViewOptions = { fadeInactive: false, hiddenColumns: [songDataFields.ID] };\n\nexport interface ViewOptionsContextType {\n  viewOptions: ViewOptions;\n  setViewOptions: (newOptions: ViewOptions) => void;\n  sortColumns: SortField[];\n  toggleSortColumn: (columnField: string) => void;\n  resetSorting: () => void;\n}\n\nexport const ViewOptionsContext = React.createContext<ViewOptionsContextType>({\n  viewOptions: defaultViewOptions,\n  setViewOptions: () => null,\n  sortColumns: [],\n  toggleSortColumn: () => null,\n  resetSorting: () => null,\n});\n\nexport const ViewOptionsContextProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement => {\n  const [viewOptions, setViewOptions] = React.useState<ViewOptions>(defaultViewOptions);\n  const [sortColumns, setSortColumns] = React.useState<SortField[]>([]);\n\n  const toggleSortColumn = React.useCallback(\n    (columnField: string) => {\n      const column = sortColumns.find((c) => c.fieldName === columnField);\n      if (typeof column === \"undefined\") {\n        // Column isn't in the list, add it in asc mode\n        setSortColumns((prevSortColumns) => [\n          ...prevSortColumns,\n          {\n            fieldName: columnField,\n            direction: \"ascending\",\n          },\n        ]);\n      } else if (column.direction === \"ascending\") {\n        // Column is in the list asc -> switch to desc\n        setSortColumns((prevSortColumns) =>\n          prevSortColumns.map((sc) =>\n            sc.fieldName === columnField ? { ...sc, direction: \"descending\" } : sc\n          )\n        );\n      } else {\n        // Column is in the list desc -> remove it\n        setSortColumns((prevSortColumns) => prevSortColumns.filter((c) => c !== column));\n      }\n    },\n    [sortColumns]\n  );\n\n  React.useEffect(() => console.table(sortColumns), [sortColumns]);\n\n  const state = React.useMemo(\n    () => ({\n      viewOptions,\n      setViewOptions,\n      sortColumns,\n      toggleSortColumn,\n      resetSorting: () => {\n        setSortColumns([]);\n      },\n    }),\n    [sortColumns, toggleSortColumn, viewOptions]\n  );\n  return <ViewOptionsContext.Provider value={state}>{children}</ViewOptionsContext.Provider>;\n};\n\nexport const useViewOptionsContext = (): ViewOptionsContextType =>\n  React.useContext(ViewOptionsContext);\n","import * as React from \"react\";\nimport { SongData } from \"../constants/MusicTypes\";\nimport { sortObjectListByFields } from \"../utils/ArrayUtilities\";\nimport { parseCSVFile } from \"../utils/FileUtilities\";\nimport { isDefinedString } from \"../utils/StringUtilities\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport { useViewOptionsContext } from \"./ViewOptionsContext\";\n\nexport interface SongDataContextType {\n  file: File | undefined;\n  isLoading: boolean;\n  isDirty: boolean;\n  songs: SongData[];\n  loadFileData: () => void;\n  saveFileData: () => void;\n  cancelChanges: () => void;\n  updateSong: (song: SongData) => void;\n  addNewSongs: (newSongs: SongData[]) => void;\n}\n\nexport const SongDataContext = React.createContext<SongDataContextType>({\n  file: undefined,\n  isLoading: false,\n  isDirty: false,\n  songs: [],\n  loadFileData: () => null,\n  saveFileData: () => null,\n  cancelChanges: () => null,\n  updateSong: () => null,\n  addNewSongs: () => null,\n});\n\nexport const SongDataContextProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}): React.ReactElement => {\n  const [file, setFile] = React.useState<File>();\n  const [isLoadingFile, setIsLoadingFile] = React.useState(false);\n  const [isParsingData, setIsParsingData] = React.useState(false);\n  const [rawCSVText, setRawCSVText] = React.useState<string>();\n  const [songs, setSongs] = React.useState<SongData[]>([]);\n  const [cachedSongs, setCachedSongs] = React.useState<SongData[]>([]);\n\n  const inputRef = React.useRef<HTMLInputElement | null>(null);\n\n  const { sortColumns } = useViewOptionsContext();\n\n  React.useEffect(() => {\n    async function fetchData() {\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n          const text = e.target?.result;\n          setIsLoadingFile(true);\n          if (isDefinedString(text)) {\n            setRawCSVText(text);\n          }\n          setIsLoadingFile(false);\n        };\n        reader.readAsText(file);\n      }\n    }\n    fetchData();\n  }, [file]);\n\n  React.useEffect(() => {\n    async function parseData() {\n      if (isDefinedString(rawCSVText)) {\n        setIsParsingData(true);\n        const parsed = await parseCSVFile(rawCSVText);\n        setSongs(parsed);\n        setCachedSongs(parsed);\n        setIsParsingData(false);\n      }\n    }\n    parseData();\n  }, [rawCSVText]);\n\n  React.useEffect(() => {\n    setSongs(\n      (previousSongs) =>\n        sortObjectListByFields(\n          previousSongs,\n          sortColumns.length > 0\n            ? sortColumns\n            : [{ fieldName: songDataFields.ID.name, direction: \"ascending\" }]\n        ) as SongData[]\n    );\n  }, [sortColumns]);\n\n  const handleFileUpload = (e: React.FormEvent<HTMLInputElement>) => {\n    const { files } = e.currentTarget;\n    if (files && files.length) {\n      setFile(files[0]);\n    }\n  };\n\n  const isLoading = React.useMemo(\n    () => isLoadingFile || isParsingData,\n    [isLoadingFile, isParsingData]\n  );\n\n  const isDirty = React.useMemo(\n    () => JSON.stringify(songs) !== JSON.stringify(cachedSongs),\n    [songs, cachedSongs]\n  );\n\n  const loadFileData = React.useCallback(() => {\n    inputRef.current?.click();\n  }, [inputRef]);\n\n  const saveFileData = React.useCallback(() => {\n    // TODO Write new data to a csv or download it or something\n    setCachedSongs(songs);\n  }, [songs]);\n\n  const cancelChanges = React.useCallback(() => {\n    setSongs(cachedSongs);\n  }, [cachedSongs]);\n\n  const updateSong = React.useCallback((song: SongData) => {\n    setSongs((prevSongs) =>\n      prevSongs.map((s) => (s.new_file_name === song.new_file_name ? song : s))\n    );\n  }, []);\n\n  const addNewSongs = React.useCallback(\n    (newSongs: SongData[]) => {\n      const minId = Math.min(0, ...songs.map((s) => s.id));\n      const toAdd = newSongs.map((song, index) => ({\n        ...song,\n        id: minId - (songs.length - index),\n      }));\n\n      // Add the new songs to state.songs and reassign ids\n      setSongs([...toAdd, ...songs]);\n    },\n    [songs]\n  );\n  const state = React.useMemo(\n    () => ({\n      file,\n      isLoading,\n      isDirty,\n      songs,\n      loadFileData,\n      saveFileData,\n      cancelChanges,\n      updateSong,\n      addNewSongs,\n    }),\n    [\n      addNewSongs,\n      cancelChanges,\n      file,\n      isDirty,\n      isLoading,\n      loadFileData,\n      saveFileData,\n      songs,\n      updateSong,\n    ]\n  );\n\n  return (\n    <SongDataContext.Provider value={state}>\n      {children}\n      <div>\n        <input\n          style={{ display: \"none\" }}\n          accept=\".csv\"\n          ref={inputRef}\n          onChange={handleFileUpload}\n          type=\"file\"\n        />\n      </div>\n    </SongDataContext.Provider>\n  );\n};\n\nexport const useSongDataContext = (): SongDataContextType => React.useContext(SongDataContext);\n","/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  DefaultButton,\n  Dialog,\n  DialogType,\n  DialogFooter,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\n\ninterface Props {\n  /**\n   * Whether or not this dialog is visible\n   */\n  visible: boolean;\n\n  /**\n   * Update function to set the visibility of this dialog\n   */\n  setVisible: (visible: boolean) => void;\n\n  /**\n   * Message to display to the user for confirmation\n   */\n  message: string;\n\n  /**\n   * Function to call when the user clicks the confirm button\n   */\n  onConfirm: () => void;\n\n  /**\n   * Optional title for the dialog window\n   */\n  title?: string;\n\n  /**\n   * Optional function to call when the user clicks the cancel button\n   */\n  onCancel?: () => void;\n\n  /**\n   * Optional text for the confirm button\n   */\n  confirmAltText?: string;\n\n  /**\n   * Optional text for the cancel button\n   */\n  cancelAltText?: string;\n}\n\n/**\n * ConfirmDialog presents a generic confirmation dialog, using a passed-in message and\n * a callback function to run if the user confirms.\n * By default, the dialog presents the user \"Confirm\" and \"Cancel\" options, but these can\n * be overridden by the optional props.\n */\nconst ConfirmDialog = (props: Props): React.ReactElement => {\n  const {\n    visible,\n    setVisible,\n    message,\n    title,\n    onConfirm,\n    onCancel,\n    confirmAltText,\n    cancelAltText,\n  } = props;\n\n  const dialogContentProps = {\n    type: DialogType.normal,\n    title: title || \"Please Confirm\",\n    closeButtonAriaLabel: \"Close\",\n    subText: message,\n  };\n\n  // Callback for the Confirm button - close the dialog and call the onConfirm callback\n  const handleConfirm = (): void => {\n    setVisible(false);\n    onConfirm();\n  };\n\n  // Callback for the Cancel button - close the dialog and call onCancel if it exists\n  const handleCancel = (): void => {\n    setVisible(false);\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={() => setVisible(false)}\n    >\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleConfirm} text={confirmAltText || \"Confirm\"} />\n          <DefaultButton onClick={handleCancel} text={cancelAltText || \"Cancel\"} />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport default ConfirmDialog;\n","import React from \"react\";\nimport { IColumn } from \"@fluentui/react\";\nimport { getUniqueValuesByField } from \"./ArrayUtilities\";\nimport { convertToTitleCase } from \"./StringUtilities\";\nimport { getProperties, TypedProperty } from \"./ObjectUtilities\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport { SongData, SongDataColumn } from \"../constants/MusicTypes\";\n\n/**\n * Get the display name associated with this `field`\n * @param field Field to convert to a display name\n */\nexport const getDisplayName = (field: string): string => {\n  // Try to find a matching song data field and use its displayName\n  const matchingSongDataField = Object.keys(songDataFields)\n    .map((k) => Reflect.get(songDataFields, k) as SongDataColumn)\n    .find((f) => f.name === field);\n  if (matchingSongDataField) {\n    return matchingSongDataField.displayName;\n  }\n  // By default, convert the field to titlecase and replace underscores with spaces\n  return convertToTitleCase(field.replace(/_/g, \" \"));\n};\n\n/**\n * Get an array of IColumns that can be used for a list of objects\n */\nexport const getColumnsFromObjectArray = (objects: Record<string, unknown>[]): IColumn[] => {\n  const allFields = objects\n    // Get properties of all objects\n    .map((obj) => getProperties(obj))\n    // Flatten the array of property arrays\n    .flat()\n    // Stringify each TypedProperty for comparison\n    .map((item) => JSON.stringify(item))\n    // Filter to unique values\n    .filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    })\n    // Convert stringified values back to TypedProperty objects\n    .map((itemString) => JSON.parse(itemString) as TypedProperty);\n\n  // Order is going to be determined by when the above map function encountered each field\n  //   console.log(allFields);\n\n  // Map the allFields array to an array of IColumns, using the name and type\n  return allFields.map((field) => {\n    const displayName = getDisplayName(field.name);\n    const uniqueValueLengths = getUniqueValuesByField(field.name, objects).map(\n      (item) => `${item}`.length\n    );\n    const defaultColumnSize = Math.min(500, 7 * Math.max(field.name.length, ...uniqueValueLengths));\n    return {\n      key: `column_${field.name}`,\n      name: displayName,\n      fieldName: field.name,\n      minWidth: defaultColumnSize,\n      isResizable: true,\n      isCollapsable: false,\n      data: field.dataType,\n      // eslint-disable-next-line react/display-name\n      onRender: (item: SongData) => {\n        // return getFieldAdjustedComponent(item, field);\n        return <span>{`${Reflect.get(item, field.name)}`}</span>;\n      },\n    } as IColumn;\n  });\n};\n","import * as React from \"react\";\nimport { Checkbox } from \"@fluentui/react\";\n\ninterface ActiveCheckboxProps {\n  active: boolean;\n  onChange: (newValue: boolean) => void;\n}\n\nconst ActiveCheckbox = (props: ActiveCheckboxProps): React.ReactElement => {\n  const { active, onChange } = props;\n\n  return (\n    <Checkbox\n      checked={active}\n      boxSide=\"end\"\n      styles={{\n        root: {\n          marginLeft: \"0.75em\",\n        },\n      }}\n      onChange={() => {\n        onChange(!active);\n      }}\n    />\n  );\n};\n\nexport default ActiveCheckbox;\n","/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  IColumn,\n  DetailsList,\n  CheckboxVisibility,\n  IDetailsHeaderProps,\n  IDetailsColumnRenderTooltipProps,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IDetailsRowStyles,\n  IDetailsListProps,\n  DetailsRow,\n  IRenderFunction,\n  Sticky,\n  StickyPositionType,\n  TooltipHost,\n} from \"@fluentui/react\";\nimport { getDummySongData } from \"../utils/CSVUtilities\";\nimport { SongData, ViewOptions } from \"../constants/MusicTypes\";\nimport { getColumnsFromObjectArray } from \"../utils/DetailsListUtilities\";\nimport ActiveCheckbox from \"./ActiveCheckbox\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport { TypedProperty } from \"../utils/ObjectUtilities\";\nimport { SortField } from \"../utils/ArrayUtilities\";\n\ninterface ISongDataListProps {\n  songs: SongData[];\n  onSongChange: (newSong: SongData) => void;\n  onColumnClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n  sortColumns?: SortField[];\n  viewOptions: ViewOptions;\n}\n\n/**\n * Get the component that should be used for a particular column's items\n * @param songData SongData item represented in the row\n * @param field TypedProperty of the songData to render\n * @param dispatch react redux dispatch function\n */\nconst getFieldAdjustedComponent = (\n  songData: SongData,\n  field: TypedProperty,\n  onChange: (songData: SongData) => void\n) => {\n  const fieldValue = Reflect.get(songData, field.name);\n  let itemComponent;\n  switch (field.name) {\n    case songDataFields.ID.name:\n      itemComponent = (\n        <span style={{ fontFamily: \"monospace\", color: \"grey\" }}>\n          <>{`${fieldValue}`}</>\n        </span>\n      );\n      break;\n    case songDataFields.ACTIVE.name:\n      itemComponent = (\n        <ActiveCheckbox\n          active={songData.active}\n          onChange={(newValue: boolean) => {\n            onChange({ ...songData, active: newValue });\n          }}\n        />\n      );\n      break;\n    default:\n      itemComponent = <span>{`${fieldValue}`}</span>;\n  }\n  return itemComponent;\n};\n\n/**\n * SongDataList - An DetailsList wrapper to represent music_collection csv data\n */\nconst SongDataList = (props: ISongDataListProps): React.ReactElement => {\n  const { songs, onSongChange, onColumnClick, sortColumns, viewOptions } = props;\n\n  const items = songs;\n\n  /*\n   * Memoizing the columns array in this way prevents it from being recalculated every time a\n   * single datapoint changes, which dramatically improves the performance of such events, e.g.\n   * an `active` checkbox toggle.\n   *\n   * By using only `items.length` in the dependency array, `columns` will be refreshed whenever\n   * a row is added or deleted. However, as ESLint points out, leaving the rest of `items` out\n   * of the dependency list could cause other issues.\n   *\n   * A more robust solution (which is not needed at this moment but may be useful in the future)\n   * would be to process `items` into an object describing the \"shape\" of the song data, including\n   * things such as field names, field data types, and max/min value lengths for each field. That\n   * object could then be used directly to create `columns` and it would be listed in the dependency\n   * array below rather than `items.length`.\n   */\n  const columns: IColumn[] = React.useMemo(() => {\n    const rawColumns =\n      items.length === 0\n        ? // There is no song data loaded so use dummy data for column generation and sizing\n          getColumnsFromObjectArray(getDummySongData())\n        : // Song data was loaded - use the columns from the file\n          getColumnsFromObjectArray(items);\n    // Adjust how columns render based on their data\n    return rawColumns\n      .map((column) => {\n        const sortColumn = sortColumns?.find((c) => c.fieldName === column.fieldName);\n        let isSorted;\n        let isSortedDescending;\n        if (typeof sortColumn !== \"undefined\") {\n          isSorted = true;\n          isSortedDescending = sortColumn.direction === \"descending\";\n        } else {\n          isSorted = undefined;\n          isSortedDescending = undefined;\n        }\n        return {\n          ...column,\n          onRender: (item: SongData) => {\n            return getFieldAdjustedComponent(\n              item,\n              {\n                name: column.fieldName,\n                dataType: column.data,\n              } as TypedProperty,\n              onSongChange\n            );\n          },\n          onColumnClick,\n          isSorted,\n          isSortedDescending,\n        };\n      })\n      .filter((column) => !viewOptions.hiddenColumns.some((hc) => hc.name === column.fieldName));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [items.length, sortColumns, viewOptions]);\n\n  const onRenderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\n    headerProps,\n    defaultRender\n  ) => {\n    if (!headerProps || !defaultRender) {\n      return null;\n    }\n    // This tooltip stuff keeps headers aligned with columns during horizontal scroll\n    const onRenderColumnHeaderTooltip: IRenderFunction<IDetailsColumnRenderTooltipProps> = (\n      tooltipHostProps\n      // eslint-disable-next-line react/jsx-props-no-spreading\n    ) => <TooltipHost {...tooltipHostProps} />;\n    return (\n      <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced>\n        {defaultRender({\n          ...headerProps,\n          // Get this useless 16px padding out of here\n          styles: { root: { paddingTop: 0 } },\n          onRenderColumnHeaderTooltip,\n        })}\n      </Sticky>\n    );\n  };\n\n  const onRenderRow: IDetailsListProps[\"onRenderRow\"] = (rowProps) => {\n    const customStyles: Partial<IDetailsRowStyles> = {};\n    if (rowProps) {\n      const { item } = rowProps;\n\n      // Fade inactive rows to light grey\n      if (viewOptions.fadeInactive) {\n        if (!(item as SongData).active) {\n          customStyles.root = { color: \"lightgrey\" };\n        }\n      }\n\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      return <DetailsRow {...rowProps} styles={customStyles} />;\n    }\n    return null;\n  };\n\n  return (\n    <DetailsList\n      columns={columns}\n      items={items}\n      checkboxVisibility={CheckboxVisibility.hidden}\n      onRenderDetailsHeader={onRenderDetailsHeader}\n      constrainMode={ConstrainMode.unconstrained}\n      layoutMode={DetailsListLayoutMode.fixedColumns}\n      onRenderRow={onRenderRow}\n    />\n  );\n};\n\nexport default SongDataList;\n","/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  DefaultButton,\n  Dialog,\n  DialogType,\n  DialogFooter,\n  PrimaryButton,\n  Stack,\n  TextField,\n  IDialogContentProps,\n} from \"@fluentui/react\";\nimport SongDataList from \"../SongDataList\";\nimport { getCSVRowsFromString, parseSongDataFromCSVRow } from \"../../utils/CSVUtilities\";\nimport { SongData } from \"../../constants/MusicTypes\";\nimport songDataFields from \"../../constants/songDataFields.json\";\nimport { areIdenticalArrays } from \"../../utils/ArrayUtilities\";\n\ninterface Props {\n  /**\n   * Whether or not this dialog is visible\n   */\n  visible: boolean;\n\n  /**\n   * Update function to set the visibility of this dialog\n   */\n  setVisible: (visible: boolean) => void;\n\n  existingSongs: SongData[];\n  onSubmit: (newSongs: SongData[]) => void;\n  onCancel?: () => void;\n  title?: string;\n  message?: string;\n}\n\nconst AddCSVSongsDialog = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, title, message, existingSongs } = props;\n\n  const [csvInput, setCSVInput] = React.useState([] as string[][]);\n  const [parsedSongs, setParsedSongs] = React.useState([] as SongData[]);\n\n  React.useEffect(() => {\n    const songs: SongData[] = csvInput\n      .map((row, index) => parseSongDataFromCSVRow(row, index + 1))\n      // Filter out cases where row could not be parsed\n      .filter((song) => typeof song !== \"undefined\") as SongData[];\n\n    const validSongs: SongData[] = songs.filter((song) => {\n      return (\n        // Song field set must exactly match defined songDataFields\n        areIdenticalArrays(\n          Object.keys(song),\n          Object.keys(songDataFields).map((field) => Reflect.get(songDataFields, field).name),\n          { ignoreOrder: true }\n        )\n      );\n    });\n    setParsedSongs(validSongs);\n  }, [csvInput, setParsedSongs]);\n\n  const dialogContentProps: IDialogContentProps = {\n    type: DialogType.normal,\n    title: title || \"\",\n    closeButtonAriaLabel: \"Close\",\n    subText: message,\n  };\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit(parsedSongs);\n    setCSVInput([]);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    // Clear local state\n    setCSVInput([]);\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  const handleTextFieldChange = (\n    event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    newValue?: string\n  ) => {\n    const csvRows = getCSVRowsFromString(newValue || \"\").filter(\n      // Filter out empty rows\n      (row) => !areIdenticalArrays(row, [\"\"])\n    );\n    if (!areIdenticalArrays(csvInput, csvRows)) {\n      setCSVInput(csvRows);\n    }\n  };\n\n  const getErrorMessage = (): string => {\n    // Check which rows were translated to songs\n    const invalidRowErrors = csvInput\n      .map((row, index) =>\n        parsedSongs.some((song) => song.id === index + 1) ? undefined : { id: index + 1, row }\n      )\n      .filter((item) => typeof item !== \"undefined\");\n\n    // Show error if there were any invalid rows\n    if (invalidRowErrors.length > 0) {\n      if (invalidRowErrors.length === 1) {\n        const invalidRow = invalidRowErrors[0];\n        return `Row ${invalidRow?.id} could not be parsed into a song.`;\n      }\n      return `The following rows could not be parsed into songs: ${invalidRowErrors\n        .map((r) => r?.id)\n        .join(\", \")}`;\n    }\n    // Show error if there is any duplicate data (keyed on new_file_name)\n    const newFileNames = parsedSongs\n      .map((song) => song.new_file_name)\n      .filter((nfn, index, self) => self.indexOf(nfn) === index);\n\n    if (newFileNames.length !== parsedSongs.length) {\n      const duplicateNames = newFileNames\n        .map((newFileName) => {\n          return {\n            newFileName,\n            count: parsedSongs.filter((s) => s.new_file_name === newFileName).length,\n          };\n        })\n        .filter((item) => item.count > 1);\n      return `Duplicate data detected. ${duplicateNames\n        .map((n) => `\"${n.newFileName}\" found ${n.count} times`)\n        .join(\"; \")}`;\n    }\n\n    const songsAlreadyInFile = newFileNames.filter((fileName) => {\n      return existingSongs.some((song) => song.new_file_name === fileName);\n    });\n    if (songsAlreadyInFile.length > 0) {\n      return `Duplicate data detected: ${songsAlreadyInFile.map(\n        (s) => `\"${s}\" already exists in the dataset.`\n      )}`;\n    }\n\n    return \"\";\n  };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={handleCancel}\n      minWidth=\"80%\"\n      maxWidth=\"80%\"\n    >\n      <TextField\n        multiline\n        autoAdjustHeight\n        onChange={handleTextFieldChange}\n        onGetErrorMessage={getErrorMessage}\n      />\n      <h3>Parsed Songs:</h3>\n      <SongDataList\n        songs={parsedSongs}\n        onSongChange={(): boolean => false}\n        viewOptions={{\n          fadeInactive: false,\n          hiddenColumns: [songDataFields.ID],\n        }}\n      />\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" disabled={getErrorMessage() !== \"\"} />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\nexport default AddCSVSongsDialog;\n","/* eslint-disable react/require-default-props */\nimport {\n  Checkbox,\n  DefaultButton,\n  Dialog,\n  DialogFooter,\n  DialogType,\n  IDialogContentProps,\n  Label,\n  Pivot,\n  PivotItem,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { expectedCSVColumnOrder } from \"../../utils/CSVUtilities\";\nimport { SongDataColumn, ViewOptions } from \"../../constants/MusicTypes\";\n\ninterface Props {\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onSubmit: (newViewOptions: ViewOptions) => void;\n  onCancel?: () => void;\n  viewOptions: ViewOptions;\n}\n\nconst ViewOptionsDialog = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, viewOptions } = props;\n  const [pendingViewOptions, setPendingViewOptions] = React.useState(viewOptions);\n  const dialogContentProps: IDialogContentProps = {\n    type: DialogType.normal,\n    title: \"View Options\",\n    closeButtonAriaLabel: \"Close\",\n    // subText: 'Configure options for viewing music collection data',\n  };\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit(pendingViewOptions);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setPendingViewOptions(viewOptions);\n\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  const handleFadeInactiveChange = (ev?: React.FormEvent<HTMLElement>, isChecked?: boolean) => {\n    setPendingViewOptions({\n      ...pendingViewOptions,\n      fadeInactive: !pendingViewOptions.fadeInactive,\n    });\n  };\n\n  const handleColumnCheckboxChange = (column: SongDataColumn) => {\n    const { hiddenColumns } = pendingViewOptions;\n    const columnIsHidden = hiddenColumns.some((c) => c.name === column.name);\n    if (columnIsHidden) {\n      setPendingViewOptions({\n        ...pendingViewOptions,\n        // Remove the new column from the hidden list\n        hiddenColumns: hiddenColumns.filter((c) => c.name !== column.name),\n      });\n    } else {\n      setPendingViewOptions({\n        ...pendingViewOptions,\n        hiddenColumns: [...hiddenColumns, column],\n      });\n    }\n  };\n\n  const pivotItemStyle = { marginTop: \"1em\" };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={handleCancel}\n      minWidth=\"80%\"\n      maxWidth=\"80%\"\n    >\n      <Pivot aria-label=\"View Options Pivot\">\n        <PivotItem headerText=\"General\">\n          <Stack tokens={{ childrenGap: \"1em\" }} style={pivotItemStyle}>\n            <Checkbox\n              label=\"Fade Inactive Song Rows\"\n              checked={pendingViewOptions.fadeInactive}\n              onChange={handleFadeInactiveChange}\n              styles={{ root: { marginTop: 10 } }}\n            />\n          </Stack>\n        </PivotItem>\n        <PivotItem headerText=\"Show/Hide Columns\">\n          <Label htmlFor=\"showHideColumnStack\">Visible Columns:</Label>\n          <Stack key=\"showHideColumnStack\" tokens={{ childrenGap: \"1em\" }} style={pivotItemStyle}>\n            {expectedCSVColumnOrder.map((col) => (\n              <Checkbox\n                key={col.name}\n                label={col.csvHeaderName}\n                checked={!pendingViewOptions.hiddenColumns.some((c) => c.name === col.name)}\n                onChange={() => handleColumnCheckboxChange(col)}\n              />\n            ))}\n          </Stack>\n        </PivotItem>\n      </Pivot>\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport default ViewOptionsDialog;\n","/* eslint-disable react/require-default-props */\nimport {\n  DefaultButton,\n  FontWeights,\n  getTheme,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\nimport * as React from \"react\";\n\nconst theme = getTheme();\nconst contentStyles = mergeStyleSets({\n  header: [\n    theme.fonts.xLargePlus,\n    {\n      flex: \"1 1 auto\",\n      // borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: \"flex\",\n      alignItems: \"center\",\n      fontWeight: FontWeights.semibold,\n      padding: \"12px 12px 14px 24px\",\n    },\n  ],\n});\n\ninterface Props {\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onSubmit: () => void;\n  onCancel?: () => void;\n  title: string;\n  subTitle?: string;\n  children?: React.ReactNode;\n}\n\nconst PopupModal = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, title, children } = props;\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit();\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    // Reset local state if necessary\n\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  return (\n    <Modal isOpen={visible} onDismiss={handleCancel} isBlocking={false}>\n      <div className={contentStyles.header}>\n        <span>{title}</span>\n      </div>\n      <Stack grow verticalAlign=\"space-between\">\n        {children}\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default PopupModal;\n","import * as React from \"react\";\nimport { CommandBar, ICommandBarItemProps, IButtonProps } from \"@fluentui/react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport ConfirmDialog from \"./ConfirmDialog\";\nimport AddCSVSongsDialog from \"./dialogs/AddCSVSongsDialog\";\nimport { SongData, ViewOptions } from \"../constants/MusicTypes\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport ViewOptionsDialog from \"./dialogs/ViewOptionsDialog\";\nimport PopupModal from \"./dialogs/PopupModal\";\nimport { useSongDataContext } from \"../contexts/SongDataContext\";\nimport { useViewOptionsContext } from \"../contexts/ViewOptionsContext\";\n\nconst overflowProps: IButtonProps = { ariaLabel: \"More commands\" };\n\nconst HeaderCommandBar = (): React.ReactElement => {\n  const { songs, file, loadFileData, saveFileData, isDirty, cancelChanges, addNewSongs } =\n    useSongDataContext();\n  const { sortColumns, viewOptions, toggleSortColumn, resetSorting, setViewOptions } =\n    useViewOptionsContext();\n\n  const { addToast } = useToasts();\n\n  // Local state for tracking dialog state\n  const [cancelDialogIsOpen, setCancelDialogIsOpen] = React.useState(false);\n  const [addSongDialogIsOpen, setAddSongDialogIsOpen] = React.useState(false);\n  const [viewOptionsDialogIsOpen, setViewOptionsDialogIsOpen] = React.useState(false);\n  const [testIsOpen, setTestIsOpen] = React.useState(false);\n\n  const items: ICommandBarItemProps[] = React.useMemo(\n    () => [\n      {\n        key: \"upload\",\n        text: \"Open CSV\",\n        iconProps: { iconName: \"Database\" },\n        onClick: loadFileData,\n      },\n\n      {\n        key: \"save\",\n        text: \"Save CSV\",\n        iconProps: { iconName: \"PromotedDatabase\" },\n        onClick: () => {\n          saveFileData();\n          addToast(`Successfully saved changes`, {\n            appearance: \"success\",\n          });\n        },\n        disabled: !isDirty,\n      },\n      {\n        key: \"newItem\",\n        text: \"Add Songs\",\n        cacheKey: \"myCacheKey\", // changing this key will invalidate this item's cache\n        iconProps: { iconName: \"Add\" }, // MusicNote is another good option\n        onClick: () => {\n          setAddSongDialogIsOpen(true);\n        },\n        disabled: file === undefined,\n      },\n      {\n        key: \"sort\",\n        text: \"Sort\",\n        iconProps: { iconName: \"SortLines\" },\n        onClick: (): boolean => false,\n        subMenuProps: {\n          items: [\n            {\n              key: \"newestFirst\",\n              name: \"Newest First\",\n              text: \"Newest First\",\n              // This needs an ariaLabel since it's icon-only\n              ariaLabel: \"Newest First View\",\n              iconProps: { iconName: \"SortLines\" },\n              onClick: () => {\n                resetSorting();\n                toggleSortColumn(songDataFields.NEW_FILE_NAME.name);\n                toggleSortColumn(songDataFields.DATE.name);\n                // Toggle twice so that it switches to descending\n                toggleSortColumn(songDataFields.DATE.name);\n              },\n            },\n            {\n              key: \"clearSort\",\n              name: \"Clear Sort\",\n              text: \"Reset Sorting\",\n              // This needs an ariaLabel since it's icon-only\n              ariaLabel: \"Reset Sorting\",\n              iconProps: { iconName: \"RemoveFilter\" },\n              onClick: () => {\n                resetSorting();\n              },\n              disabled: sortColumns.length === 0,\n            },\n          ],\n        },\n      },\n      {\n        key: \"view\",\n        text: \"View Options\",\n        iconProps: { iconName: \"View\" },\n        onClick: () => {\n          setViewOptionsDialogIsOpen(true);\n        },\n      },\n      {\n        key: \"cancel\",\n        text: \"Cancel Changes\",\n        iconProps: { iconName: \"Cancel\" },\n        onClick: () => {\n          setCancelDialogIsOpen(true);\n        },\n        disabled: !isDirty,\n      },\n    ],\n    [\n      addToast,\n      file,\n      isDirty,\n      loadFileData,\n      resetSorting,\n      saveFileData,\n      sortColumns,\n      toggleSortColumn,\n    ]\n  );\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      key: \"tile\",\n      text: \"Grid view\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Grid view\",\n      iconOnly: true,\n      iconProps: { iconName: \"Tiles\" },\n      onClick: () => setTestIsOpen(true),\n    },\n    {\n      key: \"info\",\n      text: \"Info\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Info\",\n      iconOnly: true,\n      iconProps: { iconName: \"Info\" },\n      onClick: () => console.log(\"Info\"),\n    },\n  ];\n\n  return (\n    <div>\n      <CommandBar\n        items={items}\n        overflowButtonProps={overflowProps}\n        farItems={farItems}\n        ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n      />\n      <ConfirmDialog\n        visible={cancelDialogIsOpen}\n        setVisible={setCancelDialogIsOpen}\n        message=\"Are you sure you want to discard all changes?\"\n        confirmAltText=\"Yes, discard!\"\n        cancelAltText=\"No, go back!\"\n        onConfirm={() => {\n          cancelChanges();\n          resetSorting();\n          addToast(\"Changes discarded\", { appearance: \"info\" });\n        }}\n      />\n      <AddCSVSongsDialog\n        title=\"Add Songs (CSV Text)\"\n        message=\"Paste CSV rows for new songs below.\"\n        visible={addSongDialogIsOpen}\n        setVisible={setAddSongDialogIsOpen}\n        onSubmit={(newSongs: SongData[]) => addNewSongs(newSongs)}\n        existingSongs={songs}\n      />\n      <ViewOptionsDialog\n        visible={viewOptionsDialogIsOpen}\n        setVisible={setViewOptionsDialogIsOpen}\n        onSubmit={(newOptions: ViewOptions) => {\n          setViewOptions(newOptions);\n        }}\n        viewOptions={viewOptions}\n      />\n      <PopupModal\n        visible={testIsOpen}\n        setVisible={setTestIsOpen}\n        onSubmit={() => console.log(\"a\")}\n        title=\"Test Popup\"\n      >\n        <span>Hello</span>\n      </PopupModal>\n    </div>\n  );\n};\nexport default HeaderCommandBar;\n","import React from \"react\";\nimport { IColumn, ProgressIndicator, ScrollablePane } from \"@fluentui/react\";\nimport HeaderCommandBar from \"./HeaderCommandBar\";\nimport SongDataList from \"./SongDataList\";\nimport { SongData } from \"../constants/MusicTypes\";\nimport { useSongDataContext } from \"../contexts/SongDataContext\";\nimport { useViewOptionsContext } from \"../contexts/ViewOptionsContext\";\n\nconst MusicView = () => {\n  const { songs, updateSong, isLoading } = useSongDataContext();\n  const { sortColumns, viewOptions, toggleSortColumn } = useViewOptionsContext();\n\n  return (\n    /*\n     * Configuration for DetailsList with header came from from:\n     * https://stackoverflow.com/a/53527580/6509903\n     */\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n      }}\n    >\n      <div style={{ flex: 0 }}>\n        <HeaderCommandBar />\n      </div>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <ScrollablePane>\n          {isLoading ? (\n            <ProgressIndicator barHeight={4} />\n          ) : (\n            <SongDataList\n              songs={songs}\n              onSongChange={(newSong: SongData) => {\n                updateSong(newSong);\n              }}\n              onColumnClick={(ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => {\n                if (typeof column !== \"undefined\" && typeof column.fieldName !== \"undefined\") {\n                  toggleSortColumn(column.fieldName);\n                }\n              }}\n              sortColumns={sortColumns}\n              viewOptions={viewOptions}\n            />\n          )}\n        </ScrollablePane>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicView;\n","import { initializeIcons } from \"@fluentui/react\";\nimport React from \"react\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport { SongDataContextProvider } from \"../contexts/SongDataContext\";\nimport { ViewOptionsContextProvider } from \"../contexts/ViewOptionsContext\";\n\nimport MusicView from \"./MusicView\";\n\n// See https://github.com/microsoft/fluentui/wiki/Using-icons\ninitializeIcons(/* optional base url */);\n\nexport default function Home(): React.ReactElement {\n  return (\n    <ToastProvider>\n      <ViewOptionsContextProvider>\n        <SongDataContextProvider>\n          <MusicView />\n        </SongDataContextProvider>\n      </ViewOptionsContextProvider>\n    </ToastProvider>\n  );\n}\n","import React from \"react\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}