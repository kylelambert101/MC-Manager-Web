{"version":3,"sources":["components/ConfirmDialog.tsx","utils/ObjectUtilities.ts","utils/CSVUtilities.ts","utils/FileUtilities.ts","utils/ArrayUtilities.ts","utils/DetailsListUtilities.tsx","utils/StringUtilities.ts","features/music/ActiveCheckbox.tsx","features/music/SongDataList.tsx","features/music/dialogs/AddCSVSongsDialog.tsx","features/music/dialogs/ViewOptionsDialog.tsx","features/music/dialogs/PopupModal.tsx","contexts/useMusicData.ts","features/music/HeaderCommandBar.tsx","features/music/MusicView.tsx","components/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ConfirmDialog","props","visible","setVisible","message","title","onConfirm","onCancel","confirmAltText","cancelAltText","dialogContentProps","type","DialogType","normal","closeButtonAriaLabel","subText","Dialog","hidden","onDismiss","DialogFooter","Stack","horizontal","horizontalAlign","tokens","childrenGap","PrimaryButton","onClick","text","DefaultButton","getProperties","object","Object","keys","map","key","name","dataType","expectedCSVColumnOrder","songDataFields","ACTIVE","DATE","DAY","TITLE","NEW_FILE_NAME","ORIGINAL_FILE_NAME","ORIGINAL_FILE_PATH","FILE_EXTENSION","ARTIST","ALBUM","ALBUM_ARTIST","TRACK_NUMBER","TRACK_TOTAL","DURATION","getCSVRowsFromString","csvString","Papa","data","parseSongDataFromCSVRow","csvRow","rowNum","length","reduce","song","value","index","cleanedValue","targetField","Number","Boolean","id","encoding","saveCSVFile","targetPath","songData","csvData","column","csvHeaderName","join","writeableSong","wSong","typedProperty","fieldName","fieldDataType","fieldValue","Reflect","get","isNaN","some","header","convertSongDataToCSVRow","fs","writeFileSync","err","console","log","areIdenticalArrays","arr1","arr2","options","ignoreOrder","JSON","stringify","sort","getColumnsFromObjectArray","objects","obj","flat","item","filter","self","indexOf","itemString","parse","field","displayName","matchingSongDataField","k","find","f","replace","split","word","toUpperCase","substr","toLowerCase","getDisplayName","uniqueValueLengths","getUniqueValuesByField","defaultColumnSize","Math","min","max","minWidth","isResizable","isCollapsable","onRender","ActiveCheckbox","active","onChange","Checkbox","checked","boxSide","styles","root","marginLeft","SongDataList","songs","onSongChange","onColumnClick","sortColumns","viewOptions","items","columns","React","date","day","new_file_name","original_file_name","original_file_path","file_extension","artist","album","album_artist","track_number","track_total","duration","isSorted","isSortedDescending","sortColumn","c","direction","undefined","itemComponent","ID","style","fontFamily","color","newValue","getFieldAdjustedComponent","hiddenColumns","hc","DetailsList","checkboxVisibility","CheckboxVisibility","onRenderDetailsHeader","headerProps","defaultRender","Sticky","stickyPosition","StickyPositionType","Header","isScrollSynced","paddingTop","onRenderColumnHeaderTooltip","tooltipHostProps","TooltipHost","constrainMode","ConstrainMode","unconstrained","layoutMode","DetailsListLayoutMode","fixedColumns","onRenderRow","rowProps","customStyles","fadeInactive","DetailsRow","AddCSVSongsDialog","onSubmit","existingSongs","csvInput","setCSVInput","parsedSongs","setParsedSongs","validSongs","row","handleCancel","getErrorMessage","invalidRowErrors","invalidRow","r","newFileNames","nfn","duplicateNames","newFileName","count","s","n","songsAlreadyInFile","fileName","maxWidth","TextField","multiline","autoAdjustHeight","event","csvRows","onGetErrorMessage","disabled","ViewOptionsDialog","pendingViewOptions","setPendingViewOptions","pivotItemStyle","marginTop","Pivot","PivotItem","headerText","label","ev","isChecked","Label","htmlFor","col","columnIsHidden","handleColumnCheckboxChange","theme","getTheme","contentStyles","mergeStyleSets","fonts","xLargePlus","flex","palette","neutralPrimary","display","alignItems","fontWeight","FontWeights","semibold","padding","PopupModal","children","Modal","isOpen","isBlocking","className","grow","verticalAlign","useMusicData","isLoading","cachedSongs","saveFilePath","updateSong","toggleAndApplySortColumn","loadDataFromCSV","overwriteCachedSongs","resetSorting","resetSongsFromCached","addNewSongs","newSongs","setViewOptions","overflowProps","ariaLabel","HeaderCommandBar","addToast","useToasts","cancelDialogIsOpen","setCancelDialogIsOpen","addSongDialogIsOpen","setAddSongDialogIsOpen","viewOptionsDialogIsOpen","setViewOptionsDialogIsOpen","testIsOpen","setTestIsOpen","dataHasChanged","iconProps","iconName","appearance","cacheKey","subMenuProps","farItems","iconOnly","CommandBar","overflowButtonProps","newOptions","MusicView","flexDirection","width","position","top","bottom","ScrollablePane","ProgressIndicator","barHeight","newSong","Home","initializeIcons","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRA4GeA,EAjDO,SAACC,GACrB,IACEC,EAQED,EARFC,QACAC,EAOEF,EAPFE,WACAC,EAMEH,EANFG,QACAC,EAKEJ,EALFI,MACAC,EAIEL,EAJFK,UACAC,EAGEN,EAHFM,SACAC,EAEEP,EAFFO,eACAC,EACER,EADFQ,cAGIC,EAAqB,CACzBC,KAAMC,IAAWC,OACjBR,MAAOA,GAAS,iBAChBS,qBAAsB,QACtBC,QAASX,GAiBX,OACE,cAACY,EAAA,EAAD,CACEC,QAASf,EACTQ,mBAAoBA,EACpBQ,UAAW,kBAAMf,GAAW,IAH9B,SAKE,cAACgB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,gBAAgB,SAASC,OAAQ,CAAEC,YAAa,QAAlE,UACE,cAACC,EAAA,EAAD,CAAeC,QArBD,WACpBvB,GAAW,GACXG,KAmB6CqB,KAAMnB,GAAkB,YAC/D,cAACoB,EAAA,EAAD,CAAeF,QAhBF,WACnBvB,GAAW,GACa,qBAAbI,GACTA,KAa0CoB,KAAMlB,GAAiB,mB,6ECzF1DoB,EAAgB,SAC3BC,GAEA,OAAOC,OAAOC,KAAKF,GAAQG,KAAI,SAACC,GAAD,MAAU,CACvCC,KAAMD,EACNE,gBAAiBN,EAAOI,QCZfG,EAA2C,CACtDC,EAAeC,OACfD,EAAeE,KACfF,EAAeG,IACfH,EAAeI,MACfJ,EAAeK,cACfL,EAAeM,mBACfN,EAAeO,mBACfP,EAAeQ,eACfR,EAAeS,OACfT,EAAeU,MACfV,EAAeW,aACfX,EAAeY,aACfZ,EAAea,YACfb,EAAec,UAWJC,EAAuB,SAACC,GAAmC,IAAD,EACrE,OAAO,UAAAC,QAAWD,UAAX,eAAuBE,OAAS,IAG5BC,EAA0B,SACrCC,EACAC,GAGA,GAAID,EAAOE,SAAWvB,EAAuBuB,OAY7C,OAAOF,EAAOG,QACZ,SAACC,EAAMC,EAAOC,GACZ,IAEIC,EAFEC,EAAc7B,EAAuB2B,GAG3C,OAAQE,EAAY9B,UAClB,IAAK,SACH6B,EAAeE,OAAOJ,GACtB,MACF,IAAK,UACHE,EAAeG,QAAQD,OAAOJ,IAC9B,MACF,QACEE,EAAeF,EAEnB,OAAO,2BACFD,GADL,kBAEGI,EAAY/B,KAAO8B,MAGxB,CAAEI,GAAIV,KC1DJW,EAAW,OA8EJC,EAAc,SAACC,EAAoBC,GAE9C,IAEMC,EAAU,CAFArC,EAAuBJ,KAAI,SAAC0C,GAAD,OAAYA,EAAOC,iBAAeC,KAAK,MAElE,mBAIXJ,EAASxC,KAAI,SAAC6B,GAAD,ODxBmB,SAACA,GAGtC,IAAMgB,EAAgBjD,EAAciC,GAAMD,QAAO,SAACkB,EAAOC,GAEvD,IAKIf,EALUgB,EAAuCD,EAA7C7C,KAA2B+C,EAAkBF,EAA5B5C,SAEnB+C,EAAaC,QAAQC,IAAIvB,EAAMkB,EAAc7C,MAInD,OAAQ+C,GACN,IAAK,SAEHjB,EAAeE,OAAOmB,MAAMH,GAAc,OAASA,EACnD,MACF,IAAK,UAEHlB,EAAeE,OAAOgB,GACtB,MACF,QACElB,EAAekB,EAInB,OAAO9C,EAAuBkD,MAAK,SAACZ,GAAD,OAAYA,EAAOxC,OAAS8C,KAAxD,2BAEEF,GAFF,kBAGAC,EAAc7C,KAAO8B,IAExBc,IACH,IAGH,OAAOxB,UAAa,CAACuB,GAAgB,CAAEU,QAAQ,ICVnBC,CAAwB3B,QAClDe,KAAK,MAEP,IACEa,IAAGC,cAAcnB,EAAYE,EAAS,CAAEJ,aACxC,MAAOsB,GAGP,MAFAC,QAAQC,IAAR,gCAAqCtB,IACrCqB,QAAQC,IAAIpB,GACNkB,I,4DCxEGG,EAAqB,SAChCC,EACAC,EACAC,GAEA,cAAIA,QAAJ,IAAIA,KAASC,YACJC,KAAKC,UAAUL,EAAKM,UAAYF,KAAKC,UAAUJ,EAAKK,QAEtDF,KAAKC,UAAUL,KAAUI,KAAKC,UAAUJ,IChBpCM,EAA4B,SAACC,GAmBxC,OAlBkBA,EAEfvE,KAAI,SAACwE,GAAD,OAAS5E,EAAc4E,MAE3BC,OAEAzE,KAAI,SAAC0E,GAAD,OAAUP,KAAKC,UAAUM,MAE7BC,QAAO,SAAC7C,EAAOC,EAAO6C,GACrB,OAAOA,EAAKC,QAAQ/C,KAAWC,KAGhC/B,KAAI,SAAC8E,GAAD,OAAgBX,KAAKY,MAAMD,MAMjB9E,KAAI,SAACgF,GACpB,IAAMC,EAnCoB,SAACD,GAE7B,IAAME,EAAwBpF,OAAOC,KAAKM,GACvCL,KAAI,SAACmF,GAAD,OAAOhC,QAAQC,IAAI/C,EAAgB8E,MACvCC,MAAK,SAACC,GAAD,OAAOA,EAAEnF,OAAS8E,KAC1B,OAAIE,EACKA,EAAsBD,YAGLD,EAAMM,QAAQ,KAAM,KCb3CC,MAAM,KACNvF,KAAI,SAACwF,GAAD,OACHA,EAAK7D,OAAS,EACV6D,EAAK,GAAGC,cAAgBD,EAAKE,OAAO,GAAGC,cACvCH,KAEL5C,KAAK,KDiCcgD,CAAeZ,EAAM9E,MACnC2F,ED1C4B,SACpCb,EACAT,GAGA,OACEA,EAEGvE,KAAI,SAACwE,GAAD,OAASrB,QAAQC,IAAIoB,EAAKQ,MAE9BL,QAAO,SAAC7C,EAAOC,EAAO6C,GACrB,OAAOA,EAAKC,QAAQ/C,KAAWC,GAA0B,qBAAVD,KC+BxBgE,CAAuBd,EAAM9E,KAAMqE,GAASvE,KACrE,SAAC0E,GAAD,MAAU,UAAGA,GAAO/C,UAEhBoE,EAAoBC,KAAKC,IAAI,IAAK,EAAID,KAAKE,IAAL,MAAAF,KAAI,CAAKhB,EAAM9E,KAAKyB,QAAhB,mBAA2BkE,MAC3E,MAAO,CACL5F,IAAI,UAAD,OAAY+E,EAAM9E,MACrBA,KAAM+E,EACNjC,UAAWgC,EAAM9E,KACjBiG,SAAUJ,EACVK,aAAa,EACbC,eAAe,EACf9E,KAAMyD,EAAM7E,SAEZmG,SAAU,SAAC5B,GAET,OAAO,yCAAUvB,QAAQC,IAAIsB,EAAMM,EAAM9E,e,SEpClCqG,EAnBQ,SAACvI,GACtB,IAAQwI,EAAqBxI,EAArBwI,OAAQC,EAAazI,EAAbyI,SAEhB,OACE,cAACC,EAAA,EAAD,CACEC,QAASH,EACTI,QAAQ,MACRC,OAAQ,CACNC,KAAM,CACJC,WAAY,WAGhBN,SAAU,WACRA,GAAUD,OCyKHQ,EApHM,SAAChJ,GACpB,IAAQiJ,EAAiEjJ,EAAjEiJ,MAAOC,EAA0DlJ,EAA1DkJ,aAAcC,EAA4CnJ,EAA5CmJ,cAAeC,EAA6BpJ,EAA7BoJ,YAAaC,EAAgBrJ,EAAhBqJ,YAEnDC,EAAQL,EAiBRM,EAAqBC,WAAc,WAQvC,OANmB,IAAjBF,EAAM3F,OAEF2C,ENeD,CACL,CACElC,GAAI,EACJoE,QAAQ,EACRiB,KAAM,aACNC,IAAK,aACLtJ,MAAO,SACPuJ,cAAe,aACfC,mBAAoB,WACpBC,mBAAoB,WACpBC,eAAgB,YAChBC,OAAQ,SACRC,MAAO,QACPC,aAAc,cACdC,aAAc,EACdC,YAAa,GACbC,SAAU,KAEZ,CACEhG,GAAI,EACJoE,QAAQ,EACRiB,KAAM,aACNC,IAAK,aACLtJ,MAAO,SACPuJ,cAAe,aACfC,mBAAoB,YACpBC,mBAAoB,YACpBC,eAAgB,aAChBC,OAAQ,UACRC,MAAO,SACPC,aAAc,eACdC,aAAc,EACdC,YAAa,GACbC,SAAU,OM9CN9D,EAA0BgD,IAG7BtH,KAAI,SAAC0C,GACJ,IACI2F,EACAC,EAFEC,EAAU,OAAGnB,QAAH,IAAGA,OAAH,EAAGA,EAAahC,MAAK,SAACoD,GAAD,OAAOA,EAAExF,YAAcN,EAAOM,aAUnE,MAP0B,qBAAfuF,GACTF,GAAW,EACXC,EAA8C,eAAzBC,EAAWE,YAEhCJ,OAAWK,EACXJ,OAAqBI,GAEhB,2BACFhG,GADL,IAEE4D,SAAU,SAAC5B,GACT,OA7EsB,SAChClC,EACAwC,EACAyB,GAEA,IACIkC,EADEzF,EAAaC,QAAQC,IAAIZ,EAAUwC,EAAM9E,MAE/C,OAAQ8E,EAAM9E,MACZ,KAAKG,EAAeuI,GAAG1I,KACrByI,EACE,sBAAME,MAAO,CAAEC,WAAY,YAAaC,MAAO,QAA/C,SACE,6CAAM7F,OAGV,MACF,KAAK7C,EAAeC,OAAOJ,KACzByI,EACE,cAAC,EAAD,CACEnC,OAAQhE,EAASgE,OACjBC,SAAU,SAACuC,GACTvC,EAAS,2BAAKjE,GAAN,IAAgBgE,OAAQwC,QAItC,MACF,QACEL,EAAgB,yCAAUzF,KAE9B,OAAOyF,EAiDUM,CACLvE,EACA,CACExE,KAAMwC,EAAOM,UACb7C,SAAUuC,EAAOnB,MAEnB2F,IAGJC,gBACAkB,WACAC,0BAGH3D,QAAO,SAACjC,GAAD,OAAa2E,EAAY6B,cAAc5F,MAAK,SAAC6F,GAAD,OAAQA,EAAGjJ,OAASwC,EAAOM,kBAEhF,CAACsE,EAAM3F,OAAQyF,EAAaC,IA4C/B,OACE,cAAC+B,EAAA,EAAD,CACE7B,QAASA,EACTD,MAAOA,EACP+B,mBAAoBC,IAAmBtK,OACvCuK,sBA/CgE,SAClEC,EACAC,GAEA,IAAKD,IAAgBC,EACnB,OAAO,KAOT,OACE,cAACC,EAAA,EAAD,CAAQC,eAAgBC,IAAmBC,OAAQC,gBAAc,EAAjE,SACGL,EAAc,2BACVD,GADS,IAGZ3C,OAAQ,CAAEC,KAAM,CAAEiD,WAAY,IAC9BC,4BAViF,SACrFC,GADqF,OAGlF,cAACC,EAAA,EAAD,eAAiBD,WAqCpBE,cAAeC,IAAcC,cAC7BC,WAAYC,IAAsBC,aAClCC,YA1BkD,SAACC,GACrD,IAAMC,EAA2C,GACjD,GAAID,EAAU,CACZ,IAAQhG,EAASgG,EAAThG,KAUR,OAPI2C,EAAYuD,eACRlG,EAAkB8B,SACtBmE,EAAa7D,KAAO,CAAEiC,MAAO,eAK1B,cAAC8B,EAAA,EAAD,2BAAgBH,GAAhB,IAA0B7D,OAAQ8D,KAE3C,OAAO,SCGIG,EA7IW,SAAC9M,GACzB,IAAQC,EAA2ED,EAA3EC,QAASC,EAAkEF,EAAlEE,WAAY6M,EAAsD/M,EAAtD+M,SAAUzM,EAA4CN,EAA5CM,SAAUF,EAAkCJ,EAAlCI,MAAOD,EAA2BH,EAA3BG,QAAS6M,EAAkBhN,EAAlBgN,cAEjE,EAAgCxD,WAAe,IAA/C,mBAAOyD,EAAP,KAAiBC,EAAjB,KACA,EAAsC1D,WAAe,IAArD,mBAAO2D,EAAP,KAAoBC,EAApB,KAEA5D,aAAgB,WACd,IAKM6D,EALoBJ,EACvBjL,KAAI,SAACsL,EAAKvJ,GAAN,OAAgBP,EAAwB8J,EAAKvJ,EAAQ,MAEzD4C,QAAO,SAAC9C,GAAD,MAA0B,qBAATA,KAEU8C,QAAO,SAAC9C,GAC3C,OAEEiC,EACEhE,OAAOC,KAAK8B,GACZ/B,OAAOC,KAAKM,GAAgBL,KAAI,SAACgF,GAAD,OAAW7B,QAAQC,IAAI/C,EAAgB2E,GAAO9E,QAC9E,CAAEgE,aAAa,OAIrBkH,EAAeC,KACd,CAACJ,EAAUG,IAEd,IAAM3M,EAA0C,CAC9CC,KAAMC,IAAWC,OACjBR,MAAOA,GAAS,GAChBS,qBAAsB,QACtBC,QAASX,GASLoN,EAAe,WACnBrN,GAAW,GAEXgN,EAAY,IACY,qBAAb5M,GACTA,KAiBEkN,EAAkB,WAEtB,IAAMC,EAAmBR,EACtBjL,KAAI,SAACsL,EAAKvJ,GAAN,OACHoJ,EAAY7H,MAAK,SAACzB,GAAD,OAAUA,EAAKO,KAAOL,EAAQ,UAAK2G,EAAY,CAAEtG,GAAIL,EAAQ,EAAGuJ,UAElF3G,QAAO,SAACD,GAAD,MAA0B,qBAATA,KAG3B,GAAI+G,EAAiB9J,OAAS,EAAG,CAC/B,GAAgC,IAA5B8J,EAAiB9J,OAAc,CACjC,IAAM+J,EAAaD,EAAiB,GACpC,MAAM,OAAN,cAAcC,QAAd,IAAcA,OAAd,EAAcA,EAAYtJ,GAA1B,qCAEF,MAAM,sDAAN,OAA6DqJ,EAC1DzL,KAAI,SAAC2L,GAAD,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAGvJ,MACdQ,KAAK,OAGV,IAAMgJ,EAAeT,EAClBnL,KAAI,SAAC6B,GAAD,OAAUA,EAAK8F,iBACnBhD,QAAO,SAACkH,EAAK9J,EAAO6C,GAAb,OAAsBA,EAAKC,QAAQgH,KAAS9J,KAEtD,GAAI6J,EAAajK,SAAWwJ,EAAYxJ,OAAQ,CAC9C,IAAMmK,EAAiBF,EACpB5L,KAAI,SAAC+L,GACJ,MAAO,CACLA,cACAC,MAAOb,EAAYxG,QAAO,SAACsH,GAAD,OAAOA,EAAEtE,gBAAkBoE,KAAapK,WAGrEgD,QAAO,SAACD,GAAD,OAAUA,EAAKsH,MAAQ,KACjC,MAAM,4BAAN,OAAmCF,EAChC9L,KAAI,SAACkM,GAAD,iBAAWA,EAAEH,YAAb,mBAAmCG,EAAEF,MAArC,aACJpJ,KAAK,OAGV,IAAMuJ,EAAqBP,EAAajH,QAAO,SAACyH,GAC9C,OAAOpB,EAAc1H,MAAK,SAACzB,GAAD,OAAUA,EAAK8F,gBAAkByE,QAE7D,OAAID,EAAmBxK,OAAS,EACxB,4BAAN,OAAmCwK,EAAmBnM,KACpD,SAACiM,GAAD,iBAAWA,EAAX,wCAIG,IAGT,OACE,eAAClN,EAAA,EAAD,CACEC,QAASf,EACTQ,mBAAoBA,EACpBQ,UAAWsM,EACXpF,SAAS,MACTkG,SAAS,MALX,UAOE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,kBAAgB,EAChB/F,SAzEwB,SAC5BgG,EACAzD,GAEA,IAAM0D,EAAUtL,EAAqB4H,GAAY,IAAIrE,QAEnD,SAAC2G,GAAD,OAAUxH,EAAmBwH,EAAK,CAAC,QAEhCxH,EAAmBmH,EAAUyB,IAChCxB,EAAYwB,IAiEVC,kBAAmBnB,IAErB,+CACA,cAAC,EAAD,CACEvE,MAAOkE,EACPjE,aAAc,kBAAe,GAC7BG,YAAa,CACXuD,cAAc,EACd1B,cAAe,CAAC7I,EAAeuI,OAGnC,cAAC1J,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,gBAAgB,SAASC,OAAQ,CAAEC,YAAa,QAAlE,UACE,cAACC,EAAA,EAAD,CAAeC,QAtGF,WACnBvB,GAAW,GACX6M,EAASI,GACTD,EAAY,KAmGgCxL,KAAK,SAASkN,SAAgC,KAAtBpB,MAC9D,cAAC7L,EAAA,EAAD,CAAeF,QAAS8L,EAAc7L,KAAK,oB,2BCpDtCmN,EA7FW,SAAC7O,GACzB,IAAQC,EAAyDD,EAAzDC,QAASC,EAAgDF,EAAhDE,WAAY6M,EAAoC/M,EAApC+M,SAAUzM,EAA0BN,EAA1BM,SAAU+I,EAAgBrJ,EAAhBqJ,YACjD,EAAoDG,WAAeH,GAAnE,mBAAOyF,EAAP,KAA2BC,EAA3B,KACMtO,EAA0C,CAC9CC,KAAMC,IAAWC,OACjBR,MAAO,eACPS,qBAAsB,SASlB0M,EAAe,WACnBrN,GAAW,GACX6O,EAAsB1F,GAEE,qBAAb/I,GACTA,KA4BE0O,EAAiB,CAAEC,UAAW,OAEpC,OACE,eAAClO,EAAA,EAAD,CACEC,QAASf,EACTQ,mBAAoBA,EACpBQ,UAAWsM,EACXpF,SAAS,MACTkG,SAAS,MALX,UAOE,eAACa,EAAA,EAAD,CAAO,aAAW,qBAAlB,UACE,cAACC,EAAA,EAAD,CAAWC,WAAW,UAAtB,SACE,cAACjO,EAAA,EAAD,CAAOG,OAAQ,CAAEC,YAAa,OAASsJ,MAAOmE,EAA9C,SACE,cAACtG,EAAA,EAAD,CACE2G,MAAM,0BACN1G,QAASmG,EAAmBlC,aAC5BnE,SAxCqB,SAAC6G,EAAmCC,GACnER,EAAsB,2BACjBD,GADgB,IAEnBlC,cAAekC,EAAmBlC,iBAsC1B/D,OAAQ,CAAEC,KAAM,CAAEmG,UAAW,WAInC,eAACE,EAAA,EAAD,CAAWC,WAAW,oBAAtB,UACE,cAACI,EAAA,EAAD,CAAOC,QAAQ,sBAAf,8BACA,cAACtO,EAAA,EAAD,CAAiCG,OAAQ,CAAEC,YAAa,OAASsJ,MAAOmE,EAAxE,SACG5M,EAAuBJ,KAAI,SAAC0N,GAAD,OAC1B,cAAChH,EAAA,EAAD,CAEE2G,MAAOK,EAAI/K,cACXgE,SAAUmG,EAAmB5D,cAAc5F,MAAK,SAACkF,GAAD,OAAOA,EAAEtI,OAASwN,EAAIxN,QACtEuG,SAAU,kBA9CW,SAAC/D,GAClC,IAAQwG,EAAkB4D,EAAlB5D,cACFyE,EAAiBzE,EAAc5F,MAAK,SAACkF,GAAD,OAAOA,EAAEtI,OAASwC,EAAOxC,QAEjE6M,EADEY,EACoB,2BACjBb,GADgB,IAGnB5D,cAAeA,EAAcvE,QAAO,SAAC6D,GAAD,OAAOA,EAAEtI,OAASwC,EAAOxC,UAGzC,2BACjB4M,GADgB,IAEnB5D,cAAc,GAAD,mBAAMA,GAAN,CAAqBxG,OAkCVkL,CAA2BF,KAHtCA,EAAIxN,UAHJ,6BAYf,cAAChB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,YAAU,EAACC,gBAAgB,SAASC,OAAQ,CAAEC,YAAa,QAAlE,UACE,cAACC,EAAA,EAAD,CAAeC,QA3EF,WACnBvB,GAAW,GACX6M,EAAS+B,IAyEmCpN,KAAK,WAC3C,cAACC,EAAA,EAAD,CAAeF,QAAS8L,EAAc7L,KAAK,oB,gBCpG/CmO,EAAQC,cACRC,GAAgBC,YAAe,CACnCzK,OAAQ,CACNsK,EAAMI,MAAMC,WACZ,CACEC,KAAM,WAENpF,MAAO8E,EAAMO,QAAQC,eACrBC,QAAS,OACTC,WAAY,SACZC,WAAYC,IAAYC,SACxBC,QAAS,0BAgDAC,GAjCI,SAAC5Q,GAClB,IAAQC,EAA6DD,EAA7DC,QAASC,EAAoDF,EAApDE,WAAY6M,EAAwC/M,EAAxC+M,SAAUzM,EAA8BN,EAA9BM,SAAUF,EAAoBJ,EAApBI,MAAOyQ,EAAa7Q,EAAb6Q,SAOlDtD,EAAe,WACnBrN,GAAW,GAGa,qBAAbI,GACTA,KAIJ,OACE,eAACwQ,EAAA,EAAD,CAAOC,OAAQ9Q,EAASgB,UAAWsM,EAAcyD,YAAY,EAA7D,UACE,qBAAKC,UAAWlB,GAAcxK,OAA9B,SACE,+BAAOnF,MAET,eAACe,EAAA,EAAD,CAAO+P,MAAI,EAACC,cAAc,gBAA1B,UACGN,EACD,eAAC1P,EAAA,EAAD,CAAOC,YAAU,EAACC,gBAAgB,SAASC,OAAQ,CAAEC,YAAa,QAAlE,UACE,cAACC,EAAA,EAAD,CAAeC,QAtBF,WACnBvB,GAAW,GACX6M,KAoB4CrL,KAAK,WAC3C,cAACC,EAAA,EAAD,CAAeF,QAAS8L,EAAc7L,KAAK,qBC5DxC0P,GAAe,WAC1B,MAAO,CACLC,WAAW,EACXC,YAAa,GACbrI,MAAO,GACPsI,aAAc,GACdnI,YAAa,GACbC,YAAa,CACXuD,cAAc,EACd1B,cAAe,CAAC7I,EAAeuI,KAEjC4G,WAAY,SAAC3N,GAAD,OAAoB,MAChC4N,yBAA0B,SAAC/M,GAAD,OAAoB,MAC9CgN,gBAAiB,kBAAM,MACvBC,qBAAsB,kBAAM,MAC5BC,aAAc,kBAAM,MACpBC,qBAAsB,kBAAM,MAC5BC,YAAa,SAACC,GAAD,OAA0B,MACvCC,eAAgB,SAAC/L,GAAD,OAA0B,QCVxCgM,GAA8B,CAAEC,UAAW,iBA8LlCC,GA5LU,WACvB,MAaIf,KAZFG,EADF,EACEA,aACAtI,EAFF,EAEEA,MACAG,EAHF,EAGEA,YACAC,EAJF,EAIEA,YACAiI,EALF,EAKEA,YACAG,EANF,EAMEA,yBACAC,EAPF,EAOEA,gBACAC,EARF,EAQEA,qBACAC,EATF,EASEA,aACAC,EAVF,EAUEA,qBACAC,EAXF,EAWEA,YACAE,EAZF,EAYEA,eAGMI,EAAaC,sBAAbD,SAGR,EAAoD5I,YAAe,GAAnE,mBAAO8I,EAAP,KAA2BC,EAA3B,KACA,EAAsD/I,YAAe,GAArE,mBAAOgJ,EAAP,KAA4BC,EAA5B,KACA,EAA8DjJ,YAAe,GAA7E,mBAAOkJ,EAAP,KAAgCC,EAAhC,KACA,EAAoCnJ,YAAe,GAAnD,mBAAOoJ,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBtJ,WACrB,kBAAMrD,KAAKC,UAAU6C,KAAW9C,KAAKC,UAAUkL,KAC/C,CAACrI,EAAOqI,IAKJhI,EAAgC,CACpC,CACErH,IAAK,SACLP,KAAM,WACNqR,UAAW,CAAEC,SAAU,YACvBvR,QAAS,WACPiQ,MAIJ,CACEzP,IAAK,OACLP,KAAM,WACNqR,UAAW,CAAEC,SAAU,oBACvBvR,QAAS,WACP6C,EAAYiN,EAActI,GAC1B0I,IACAS,EAAS,iCAAD,OAAkCb,GAAgB,CACxD0B,WAAY,aAGhBrE,UAAWkE,GAEb,CACE7Q,IAAK,UACLP,KAAM,YACNwR,SAAU,aACVH,UAAW,CAAEC,SAAU,OACvBvR,QAAS,WACPgR,GAAuB,IAEzB7D,UAjCepF,WAAc,iBAAuB,KAAjB+H,IAAqB,CAACA,KAmC3D,CACEtP,IAAK,OACLP,KAAM,OACNqR,UAAW,CAAEC,SAAU,aACvBvR,QAAS,kBAAe,GACxB0R,aAAc,CACZ7J,MAAO,CACL,CACErH,IAAK,cACLC,KAAM,eACNR,KAAM,eAENwQ,UAAW,oBACXa,UAAW,CAAEC,SAAU,aACvBvR,QAAS,WACPmQ,IACAH,EAAyBpP,EAAeK,cAAcR,MACtDuP,EAAyBpP,EAAeE,KAAKL,MAE7CuP,EAAyBpP,EAAeE,KAAKL,QAGjD,CACED,IAAK,YACLC,KAAM,aACNR,KAAM,mBAENwQ,UAAW,mBACXa,UAAW,CAAEC,SAAU,gBACvBvR,QAAS,WACPmQ,KAEFhD,SAAiC,IAAvBxF,EAAYzF,WAK9B,CACE1B,IAAK,OACLP,KAAM,eACNqR,UAAW,CAAEC,SAAU,QACvBvR,QAAS,WACPkR,GAA2B,KAG/B,CACE1Q,IAAK,SACLP,KAAM,iBACNqR,UAAW,CAAEC,SAAU,UACvBvR,QAAS,WACP8Q,GAAsB,IAExB3D,UAAWkE,IAITM,EAAmC,CACvC,CACEnR,IAAK,OACLP,KAAM,YAENwQ,UAAW,YACXmB,UAAU,EACVN,UAAW,CAAEC,SAAU,SACvBvR,QAAS,kBAAMoR,GAAc,KAE/B,CACE5Q,IAAK,OACLP,KAAM,OAENwQ,UAAW,OACXmB,UAAU,EACVN,UAAW,CAAEC,SAAU,QACvBvR,QAAS,kBAAMmE,QAAQC,IAAI,WAI/B,OACE,gCACE,cAACyN,EAAA,EAAD,CACEhK,MAAOA,EACPiK,oBAAqBtB,GACrBmB,SAAUA,EACVlB,UAAU,+DAEZ,cAAC,EAAD,CACEjS,QAASqS,EACTpS,WAAYqS,EACZpS,QAAQ,gDACRI,eAAe,gBACfC,cAAc,eACdH,UAAW,WACTwR,IACAD,IACAQ,EAAS,oBAAqB,CAAEa,WAAY,YAGhD,cAAC,EAAD,CACE7S,MAAM,uBACND,QAAQ,sCACRF,QAASuS,EACTtS,WAAYuS,EACZ1F,SAAU,SAACgF,GAAD,OAA0BD,EAAYC,IAChD/E,cAAe/D,IAEjB,cAAC,EAAD,CACEhJ,QAASyS,EACTxS,WAAYyS,EACZ5F,SAAU,SAACyG,GACTxB,EAAewB,IAEjBnK,YAAaA,IAEf,cAAC,GAAD,CACEpJ,QAAS2S,EACT1S,WAAY2S,EACZ9F,SAAU,kBAAMnH,QAAQC,IAAI,MAC5BzF,MAAM,aAJR,SAME,+CCtIOqT,GAxDG,WAChB,MAQIrC,KAPFC,EADF,EACEA,UAEApI,EAHF,EAGEA,MACAG,EAJF,EAIEA,YACAC,EALF,EAKEA,YACAmI,EANF,EAMEA,WACAC,EAPF,EAOEA,yBAKF,OAKE,cAJA,CAIA,OACE5G,MAAO,CACLyF,QAAS,OACToD,cAAe,SACfC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,OAAQ,GAPZ,UAUE,qBAAKjJ,MAAO,CAAEsF,KAAM,GAApB,SACE,cAAC,GAAD,MAEF,qBAAKtF,MAAO,CAAEsF,KAAM,EAAGyD,SAAU,YAAjC,SACE,cAACG,EAAA,EAAD,UACG1C,EACC,cAAC2C,EAAA,EAAD,CAAmBC,UAAW,IAE9B,cAAC,EAAD,CACEhL,MAAOA,EACPC,aAAc,SAACgL,GACb1C,EAAW0C,IAEb/K,cAAe,SAACmG,EAAoC5K,GAC5B,qBAAXA,GAAsD,qBAArBA,EAAOM,WACjDyM,EAAyB/M,EAAOM,YAGpCoE,YAAaA,EACbC,YAAaA,YC7CZ,SAAS8K,KACtB,OACE,cAAC,gBAAD,UACE,cAAC,GAAD,MALNC,cCIeC,OARf,WACE,OACE,qBAAKpD,UAAU,MAAf,SACE,cAACkD,GAAD,OCQSG,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.630ddcdc.chunk.js","sourcesContent":["/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  DefaultButton,\n  Dialog,\n  DialogType,\n  DialogFooter,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\n\ninterface Props {\n  /**\n   * Whether or not this dialog is visible\n   */\n  visible: boolean;\n\n  /**\n   * Update function to set the visibility of this dialog\n   */\n  setVisible: (visible: boolean) => void;\n\n  /**\n   * Message to display to the user for confirmation\n   */\n  message: string;\n\n  /**\n   * Function to call when the user clicks the confirm button\n   */\n  onConfirm: () => void;\n\n  /**\n   * Optional title for the dialog window\n   */\n  title?: string;\n\n  /**\n   * Optional function to call when the user clicks the cancel button\n   */\n  onCancel?: () => void;\n\n  /**\n   * Optional text for the confirm button\n   */\n  confirmAltText?: string;\n\n  /**\n   * Optional text for the cancel button\n   */\n  cancelAltText?: string;\n}\n\n/**\n * ConfirmDialog presents a generic confirmation dialog, using a passed-in message and\n * a callback function to run if the user confirms.\n * By default, the dialog presents the user \"Confirm\" and \"Cancel\" options, but these can\n * be overridden by the optional props.\n */\nconst ConfirmDialog = (props: Props): React.ReactElement => {\n  const {\n    visible,\n    setVisible,\n    message,\n    title,\n    onConfirm,\n    onCancel,\n    confirmAltText,\n    cancelAltText,\n  } = props;\n\n  const dialogContentProps = {\n    type: DialogType.normal,\n    title: title || \"Please Confirm\",\n    closeButtonAriaLabel: \"Close\",\n    subText: message,\n  };\n\n  // Callback for the Confirm button - close the dialog and call the onConfirm callback\n  const handleConfirm = (): void => {\n    setVisible(false);\n    onConfirm();\n  };\n\n  // Callback for the Cancel button - close the dialog and call onCancel if it exists\n  const handleCancel = (): void => {\n    setVisible(false);\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={() => setVisible(false)}\n    >\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleConfirm} text={confirmAltText || \"Confirm\"} />\n          <DefaultButton onClick={handleCancel} text={cancelAltText || \"Cancel\"} />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport default ConfirmDialog;\n","/**\n * Name and dataType of a property on an object\n */\nexport type TypedProperty = {\n  name: string;\n  dataType: string;\n};\n\n/**\n * Get the name and datatype of all properties of an object\n * @param object Object to analyze\n */\nexport const getProperties = (\n  object: Record<string, unknown>\n): TypedProperty[] => {\n  return Object.keys(object).map((key) => ({\n    name: key,\n    dataType: typeof object[key],\n  }));\n};\n","import * as Papa from 'papaparse';\nimport songDataFields from '../constants/songDataFields.json';\nimport { SongData, SongDataColumn } from '../features/music/MusicTypes';\nimport { getProperties } from './ObjectUtilities';\n\nexport const expectedCSVColumnOrder: SongDataColumn[] = [\n  songDataFields.ACTIVE,\n  songDataFields.DATE,\n  songDataFields.DAY,\n  songDataFields.TITLE,\n  songDataFields.NEW_FILE_NAME,\n  songDataFields.ORIGINAL_FILE_NAME,\n  songDataFields.ORIGINAL_FILE_PATH,\n  songDataFields.FILE_EXTENSION,\n  songDataFields.ARTIST,\n  songDataFields.ALBUM,\n  songDataFields.ALBUM_ARTIST,\n  songDataFields.TRACK_NUMBER,\n  songDataFields.TRACK_TOTAL,\n  songDataFields.DURATION,\n];\n\nexport const isCSVHeaderValid = (header: string[]): boolean => {\n  // Check whether header string matches expected column order\n  return (\n    JSON.stringify(header) ===\n    JSON.stringify(expectedCSVColumnOrder.map((column) => column.csvHeaderName))\n  );\n};\n\nexport const getCSVRowsFromString = (csvString: string): string[][] => {\n  return Papa.parse(csvString)?.data || ([] as string[][]);\n};\n\nexport const parseSongDataFromCSVRow = (\n  csvRow: string[],\n  rowNum: number\n): SongData | undefined => {\n  // If the row doesn't have the right number of columns, don't bother parsing\n  if (csvRow.length !== expectedCSVColumnOrder.length) {\n    return undefined;\n  }\n  /*\n   * I'm making a couple of assumptions here:\n   * 1. Columns are in expected order per expectedCSVColumnOrder above\n   * 2. Fields on SongData match up exactly to those column names\n   *\n   * Assuming those are true, I can build a new SongData object from the array,\n   * using, for each index, the item from expectedCSVColumnOrder as the field name\n   * and the item from csvRow as the value.\n   */\n  return csvRow.reduce(\n    (song, value, index) => {\n      const targetField = expectedCSVColumnOrder[index];\n      // Parse values based on field dataType\n      let cleanedValue;\n      switch (targetField.dataType) {\n        case 'number':\n          cleanedValue = Number(value);\n          break;\n        case 'boolean':\n          cleanedValue = Boolean(Number(value));\n          break;\n        default:\n          cleanedValue = value;\n      }\n      return {\n        ...song,\n        [targetField.name]: cleanedValue,\n      };\n    },\n    { id: rowNum } // initial value for \"song\"\n  ) as SongData;\n};\n\nexport const convertSongDataToCSVRow = (song: SongData): string => {\n  // Translate song into an object with writeable CSV data by getting song's properties\n  // and conditionally transforming or removing them\n  const writeableSong = getProperties(song).reduce((wSong, typedProperty) => {\n    // Unpack property information\n    const { name: fieldName, dataType: fieldDataType } = typedProperty;\n    // Get the value of this field from `song`\n    const fieldValue = Reflect.get(song, typedProperty.name);\n\n    // Transform the value based on field datatype\n    let cleanedValue;\n    switch (fieldDataType) {\n      case 'number':\n        // Replace \"NaN\" with \"None\" for number fields\n        cleanedValue = Number.isNaN(fieldValue) ? 'None' : fieldValue;\n        break;\n      case 'boolean':\n        // Convert boolean fields back to numbers\n        cleanedValue = Number(fieldValue);\n        break;\n      default:\n        cleanedValue = fieldValue;\n    }\n\n    // Only add this field to the writeableSong if it is an expected column\n    return expectedCSVColumnOrder.some((column) => column.name === fieldName)\n      ? {\n          ...wSong,\n          [typedProperty.name]: cleanedValue,\n        }\n      : wSong;\n  }, {});\n\n  // Convert writeableSong to a CSV string with no header\n  return Papa.unparse([writeableSong], { header: false });\n};\n\nexport const getDummySongData = (): SongData[] => {\n  return [\n    {\n      id: 1,\n      active: true,\n      date: '2020-06-01',\n      day: '2020-06-01',\n      title: 'Item 1',\n      new_file_name: 'item_1.txt',\n      original_file_name: 'origname',\n      original_file_path: 'origpath',\n      file_extension: 'extension',\n      artist: 'artist',\n      album: 'album',\n      album_artist: 'albumartist',\n      track_number: 1,\n      track_total: 10,\n      duration: 100,\n    },\n    {\n      id: 2,\n      active: false,\n      date: '2020-06-02',\n      day: '2020-06-02',\n      title: 'Item 2',\n      new_file_name: 'item_2.txt',\n      original_file_name: 'origname2',\n      original_file_path: 'origpath2',\n      file_extension: 'extension2',\n      artist: 'artist2',\n      album: 'album2',\n      album_artist: 'albumartist2',\n      track_number: 2,\n      track_total: 10,\n      duration: 200,\n    },\n  ];\n};\n","// import { remote } from 'electron';\nimport fs from \"fs\";\nimport { SongData } from \"../features/music/MusicTypes\";\n// import detectCharacterEncoding from 'detect-character-encoding';\nimport {\n  parseSongDataFromCSVRow,\n  isCSVHeaderValid,\n  expectedCSVColumnOrder,\n  convertSongDataToCSVRow,\n  getCSVRowsFromString,\n} from \"./CSVUtilities\";\n\n// Default file encoding to use for read/write\nconst encoding = \"utf8\";\n\nexport const selectFileToLoad = async (): Promise<string | undefined> => {\n  // Use remote dialog because this won't run from main thread\n  // const { filePaths } = await remote.dialog.showOpenDialog({\n  //   // For other properties see:\n  //   // https://www.electronjs.org/docs/api/dialog#dialogshowopendialogbrowserwindow-options\n  //   properties: [\"openFile\"],\n  // });\n\n  // return filePaths[0] || undefined;\n  // TODO add file resolution for web version\n  return undefined;\n};\n\nconst getFileContents = (filePath: string): string | undefined => {\n  console.log(`Opening file: \"${filePath}\"`);\n\n  // detectCharacterEncoding used native module that was difficult to manage in electron\n  // const fileBuffer = fs.readFileSync(filePath);\n  // const detectedEncoding = detectCharacterEncoding(fileBuffer)?.encoding;\n  // if (detectedEncoding) {\n  //   console.log(`Detected encoding \"${detectedEncoding}\"`);\n  //   // If encoding detection worked\n  //   if (detectedEncoding.startsWith('ISO')) {\n  //     encoding = 'ascii';\n  //     console.log(`Remapped encoding \"${detectedEncoding}\" to \"${encoding}\"`);\n  //   } else {\n  //     encoding = detectedEncoding;\n  //   }\n  // } else {\n  //   // If encoding detection didn't work\n  //   encoding = 'utf-8';\n  //   console.log(`No encoding detected. Using default \"${encoding}\".`);\n  // }\n\n  let results;\n  try {\n    results = fs.readFileSync(filePath, encoding);\n  } catch (err) {\n    console.log(\n      `Tried reading file \"${filePath}\" with encoding \"${encoding}\". Resulted in error: ${\n        (err as Error).message\n      }`\n    );\n    throw err;\n  }\n  return results;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const loadCSVFile = async (filePath: string): Promise<SongData[]> => {\n  // TODO This function freezes the page for large files - can it be extracted to a worker thread?\n  const data = getCSVRowsFromString(getFileContents(filePath) || \"\");\n\n  // First row is the header row\n  const [header, ...datarows] = data;\n\n  // Check that header rows are in the right position before processing\n  if (!isCSVHeaderValid(header)) {\n    throw new Error(\"CSV header columns were not in the expected format\");\n  }\n\n  // Pop empty lines at the end of the CSV, if any\n  while (datarows.length > 0 && datarows[datarows.length - 1].length === 1) {\n    datarows.pop();\n  }\n\n  // If there's no data, that's a problem.\n  if (!datarows || datarows.length === 0) {\n    throw new Error(\"No data found in CSV file\");\n  }\n\n  return datarows\n    .map((row: string[], index: number) => parseSongDataFromCSVRow(row, index + 1))\n    .filter((item) => typeof item !== \"undefined\") as SongData[];\n};\n\nexport const saveCSVFile = (targetPath: string, songData: SongData[]): void => {\n  // Create headers using expectedCSVColumnOrder as a base\n  const headers = expectedCSVColumnOrder.map((column) => column.csvHeaderName).join(\",\");\n\n  const csvData = [\n    // Add the headers first\n    headers,\n    // Then add csv rows for each song\n    ...songData.map((song) => convertSongDataToCSVRow(song)),\n  ].join(\"\\n\");\n\n  try {\n    fs.writeFileSync(targetPath, csvData, { encoding });\n  } catch (err) {\n    console.log(`Error writing data to ${targetPath}`);\n    console.log(csvData);\n    throw err;\n  }\n};\n","/**\n * Get a list of all unique values of object.`field` from the\n * list of `objects`\n * @param field Field to query on each object\n * @param objects List from which to aggregate object values\n */\nexport const getUniqueValuesByField = (\n  field: string,\n  objects: any[]\n): any[] => {\n  // Get all unique values of obj.`field` in the array\n  return (\n    objects\n      // Get all values of object.field\n      .map((obj) => Reflect.get(obj, field))\n      // Filter to unique, defined values\n      .filter((value, index, self) => {\n        return self.indexOf(value) === index && typeof value !== 'undefined';\n      })\n  );\n};\n\nexport type CompareOptions = {\n  /**\n   * Whether to ignore relative sort order of items in compared arrays\n   */\n  ignoreOrder: boolean;\n};\n\n/**\n * Compare two arrays via simple stringification\n * @param arr1 First array to compare\n * @param arr2 Second array to compare\n * @param options CompareOptions to alter comparison logic\n */\nexport const areIdenticalArrays = (\n  arr1: unknown[],\n  arr2: unknown[],\n  options?: CompareOptions\n): boolean => {\n  if (options?.ignoreOrder) {\n    return JSON.stringify(arr1.sort()) === JSON.stringify(arr2.sort());\n  }\n  return JSON.stringify(arr1) === JSON.stringify(arr2);\n};\n\nexport interface SortField {\n  fieldName: string;\n  direction: 'ascending' | 'descending';\n}\n\nexport const sortObjectListByFields = (\n  objList: Record<string, unknown>[],\n  sortFields: SortField[]\n): Record<string, unknown>[] => {\n  const newList = objList;\n  // Alright this isn't pretty but iteratively apply the sorts\n  sortFields.forEach((field) => {\n    newList.sort((a, b) => {\n      if (Reflect.get(a, field.fieldName) === Reflect.get(b, field.fieldName)) {\n        return 0;\n      }\n      if (field.direction === 'ascending') {\n        return Reflect.get(a, field.fieldName) > Reflect.get(b, field.fieldName)\n          ? 1\n          : -1;\n      }\n      return Reflect.get(a, field.fieldName) < Reflect.get(b, field.fieldName)\n        ? 1\n        : -1;\n    });\n  });\n  return newList;\n};\n","import React from \"react\";\nimport { IColumn } from \"@fluentui/react\";\nimport { getUniqueValuesByField } from \"./ArrayUtilities\";\nimport { convertToTitleCase } from \"./StringUtilities\";\nimport { getProperties, TypedProperty } from \"./ObjectUtilities\";\nimport songDataFields from \"../constants/songDataFields.json\";\nimport { SongData, SongDataColumn } from \"../features/music/MusicTypes\";\n\n/**\n * Get the display name associated with this `field`\n * @param field Field to convert to a display name\n */\nexport const getDisplayName = (field: string): string => {\n  // Try to find a matching song data field and use its displayName\n  const matchingSongDataField = Object.keys(songDataFields)\n    .map((k) => Reflect.get(songDataFields, k) as SongDataColumn)\n    .find((f) => f.name === field);\n  if (matchingSongDataField) {\n    return matchingSongDataField.displayName;\n  }\n  // By default, convert the field to titlecase and replace underscores with spaces\n  return convertToTitleCase(field.replace(/_/g, \" \"));\n};\n\n/**\n * Get an array of IColumns that can be used for a list of objects\n */\nexport const getColumnsFromObjectArray = (objects: Record<string, unknown>[]): IColumn[] => {\n  const allFields = objects\n    // Get properties of all objects\n    .map((obj) => getProperties(obj))\n    // Flatten the array of property arrays\n    .flat()\n    // Stringify each TypedProperty for comparison\n    .map((item) => JSON.stringify(item))\n    // Filter to unique values\n    .filter((value, index, self) => {\n      return self.indexOf(value) === index;\n    })\n    // Convert stringified values back to TypedProperty objects\n    .map((itemString) => JSON.parse(itemString) as TypedProperty);\n\n  // Order is going to be determined by when the above map function encountered each field\n  //   console.log(allFields);\n\n  // Map the allFields array to an array of IColumns, using the name and type\n  return allFields.map((field) => {\n    const displayName = getDisplayName(field.name);\n    const uniqueValueLengths = getUniqueValuesByField(field.name, objects).map(\n      (item) => `${item}`.length\n    );\n    const defaultColumnSize = Math.min(500, 7 * Math.max(field.name.length, ...uniqueValueLengths));\n    return {\n      key: `column_${field.name}`,\n      name: displayName,\n      fieldName: field.name,\n      minWidth: defaultColumnSize,\n      isResizable: true,\n      isCollapsable: false,\n      data: field.dataType,\n      // eslint-disable-next-line react/display-name\n      onRender: (item: SongData) => {\n        // return getFieldAdjustedComponent(item, field);\n        return <span>{`${Reflect.get(item, field.name)}`}</span>;\n      },\n    } as IColumn;\n  });\n};\n","/**\n * Get the title-case version of `str`, with the first letter of\n * each word capitalized\n * @param str\n */\n// eslint-disable-next-line import/prefer-default-export\nexport const convertToTitleCase = (str: string): string => {\n  return str\n    .split(' ')\n    .map((word) =>\n      word.length > 0\n        ? word[0].toUpperCase() + word.substr(1).toLowerCase()\n        : word\n    )\n    .join(' ');\n};\n","import * as React from \"react\";\nimport { Checkbox } from \"@fluentui/react\";\n\ninterface ActiveCheckboxProps {\n  active: boolean;\n  onChange: (newValue: boolean) => void;\n}\n\nconst ActiveCheckbox = (props: ActiveCheckboxProps): React.ReactElement => {\n  const { active, onChange } = props;\n\n  return (\n    <Checkbox\n      checked={active}\n      boxSide=\"end\"\n      styles={{\n        root: {\n          marginLeft: \"0.75em\",\n        },\n      }}\n      onChange={() => {\n        onChange(!active);\n      }}\n    />\n  );\n};\n\nexport default ActiveCheckbox;\n","/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  IColumn,\n  DetailsList,\n  CheckboxVisibility,\n  IDetailsHeaderProps,\n  IDetailsColumnRenderTooltipProps,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IDetailsRowStyles,\n  IDetailsListProps,\n  DetailsRow,\n  IRenderFunction,\n  Sticky,\n  StickyPositionType,\n  TooltipHost,\n} from \"@fluentui/react\";\nimport { getDummySongData } from \"../../utils/CSVUtilities\";\nimport { SongData, ViewOptions } from \"./MusicTypes\";\nimport { getColumnsFromObjectArray } from \"../../utils/DetailsListUtilities\";\nimport ActiveCheckbox from \"./ActiveCheckbox\";\nimport songDataFields from \"../../constants/songDataFields.json\";\nimport { TypedProperty } from \"../../utils/ObjectUtilities\";\nimport { SortField } from \"../../utils/ArrayUtilities\";\n\ninterface ISongDataListProps {\n  songs: SongData[];\n  onSongChange: (newSong: SongData) => void;\n  onColumnClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n  sortColumns?: SortField[];\n  viewOptions: ViewOptions;\n}\n\n/**\n * Get the component that should be used for a particular column's items\n * @param songData SongData item represented in the row\n * @param field TypedProperty of the songData to render\n * @param dispatch react redux dispatch function\n */\nconst getFieldAdjustedComponent = (\n  songData: SongData,\n  field: TypedProperty,\n  onChange: (songData: SongData) => void\n) => {\n  const fieldValue = Reflect.get(songData, field.name);\n  let itemComponent;\n  switch (field.name) {\n    case songDataFields.ID.name:\n      itemComponent = (\n        <span style={{ fontFamily: \"monospace\", color: \"grey\" }}>\n          <>{`${fieldValue}`}</>\n        </span>\n      );\n      break;\n    case songDataFields.ACTIVE.name:\n      itemComponent = (\n        <ActiveCheckbox\n          active={songData.active}\n          onChange={(newValue: boolean) => {\n            onChange({ ...songData, active: newValue });\n          }}\n        />\n      );\n      break;\n    default:\n      itemComponent = <span>{`${fieldValue}`}</span>;\n  }\n  return itemComponent;\n};\n\n/**\n * SongDataList - An DetailsList wrapper to represent music_collection csv data\n */\nconst SongDataList = (props: ISongDataListProps): React.ReactElement => {\n  const { songs, onSongChange, onColumnClick, sortColumns, viewOptions } = props;\n\n  const items = songs;\n\n  /*\n   * Memoizing the columns array in this way prevents it from being recalculated every time a\n   * single datapoint changes, which dramatically improves the performance of such events, e.g.\n   * an `active` checkbox toggle.\n   *\n   * By using only `items.length` in the dependency array, `columns` will be refreshed whenever\n   * a row is added or deleted. However, as ESLint points out, leaving the rest of `items` out\n   * of the dependency list could cause other issues.\n   *\n   * A more robust solution (which is not needed at this moment but may be useful in the future)\n   * would be to process `items` into an object describing the \"shape\" of the song data, including\n   * things such as field names, field data types, and max/min value lengths for each field. That\n   * object could then be used directly to create `columns` and it would be listed in the dependency\n   * array below rather than `items.length`.\n   */\n  const columns: IColumn[] = React.useMemo(() => {\n    const rawColumns =\n      items.length === 0\n        ? // There is no song data loaded so use dummy data for column generation and sizing\n          getColumnsFromObjectArray(getDummySongData())\n        : // Song data was loaded - use the columns from the file\n          getColumnsFromObjectArray(items);\n    // Adjust how columns render based on their data\n    return rawColumns\n      .map((column) => {\n        const sortColumn = sortColumns?.find((c) => c.fieldName === column.fieldName);\n        let isSorted;\n        let isSortedDescending;\n        if (typeof sortColumn !== \"undefined\") {\n          isSorted = true;\n          isSortedDescending = sortColumn.direction === \"descending\";\n        } else {\n          isSorted = undefined;\n          isSortedDescending = undefined;\n        }\n        return {\n          ...column,\n          onRender: (item: SongData) => {\n            return getFieldAdjustedComponent(\n              item,\n              {\n                name: column.fieldName,\n                dataType: column.data,\n              } as TypedProperty,\n              onSongChange\n            );\n          },\n          onColumnClick,\n          isSorted,\n          isSortedDescending,\n        };\n      })\n      .filter((column) => !viewOptions.hiddenColumns.some((hc) => hc.name === column.fieldName));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [items.length, sortColumns, viewOptions]);\n\n  const onRenderDetailsHeader: IRenderFunction<IDetailsHeaderProps> = (\n    headerProps,\n    defaultRender\n  ) => {\n    if (!headerProps || !defaultRender) {\n      return null;\n    }\n    // This tooltip stuff keeps headers aligned with columns during horizontal scroll\n    const onRenderColumnHeaderTooltip: IRenderFunction<IDetailsColumnRenderTooltipProps> = (\n      tooltipHostProps\n      // eslint-disable-next-line react/jsx-props-no-spreading\n    ) => <TooltipHost {...tooltipHostProps} />;\n    return (\n      <Sticky stickyPosition={StickyPositionType.Header} isScrollSynced>\n        {defaultRender({\n          ...headerProps,\n          // Get this useless 16px padding out of here\n          styles: { root: { paddingTop: 0 } },\n          onRenderColumnHeaderTooltip,\n        })}\n      </Sticky>\n    );\n  };\n\n  const onRenderRow: IDetailsListProps[\"onRenderRow\"] = (rowProps) => {\n    const customStyles: Partial<IDetailsRowStyles> = {};\n    if (rowProps) {\n      const { item } = rowProps;\n\n      // Fade inactive rows to light grey\n      if (viewOptions.fadeInactive) {\n        if (!(item as SongData).active) {\n          customStyles.root = { color: \"lightgrey\" };\n        }\n      }\n\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      return <DetailsRow {...rowProps} styles={customStyles} />;\n    }\n    return null;\n  };\n\n  return (\n    <DetailsList\n      columns={columns}\n      items={items}\n      checkboxVisibility={CheckboxVisibility.hidden}\n      onRenderDetailsHeader={onRenderDetailsHeader}\n      constrainMode={ConstrainMode.unconstrained}\n      layoutMode={DetailsListLayoutMode.fixedColumns}\n      onRenderRow={onRenderRow}\n    />\n  );\n};\n\nexport default SongDataList;\n","/* eslint-disable react/require-default-props */\nimport * as React from \"react\";\nimport {\n  DefaultButton,\n  Dialog,\n  DialogType,\n  DialogFooter,\n  PrimaryButton,\n  Stack,\n  TextField,\n  IDialogContentProps,\n} from \"@fluentui/react\";\nimport SongDataList from \"../SongDataList\";\nimport { getCSVRowsFromString, parseSongDataFromCSVRow } from \"../../../utils/CSVUtilities\";\nimport { SongData } from \"../MusicTypes\";\nimport songDataFields from \"../../../constants/songDataFields.json\";\nimport { areIdenticalArrays } from \"../../../utils/ArrayUtilities\";\n\ninterface Props {\n  /**\n   * Whether or not this dialog is visible\n   */\n  visible: boolean;\n\n  /**\n   * Update function to set the visibility of this dialog\n   */\n  setVisible: (visible: boolean) => void;\n\n  existingSongs: SongData[];\n  onSubmit: (newSongs: SongData[]) => void;\n  onCancel?: () => void;\n  title?: string;\n  message?: string;\n}\n\nconst AddCSVSongsDialog = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, title, message, existingSongs } = props;\n\n  const [csvInput, setCSVInput] = React.useState([] as string[][]);\n  const [parsedSongs, setParsedSongs] = React.useState([] as SongData[]);\n\n  React.useEffect(() => {\n    const songs: SongData[] = csvInput\n      .map((row, index) => parseSongDataFromCSVRow(row, index + 1))\n      // Filter out cases where row could not be parsed\n      .filter((song) => typeof song !== \"undefined\") as SongData[];\n\n    const validSongs: SongData[] = songs.filter((song) => {\n      return (\n        // Song field set must exactly match defined songDataFields\n        areIdenticalArrays(\n          Object.keys(song),\n          Object.keys(songDataFields).map((field) => Reflect.get(songDataFields, field).name),\n          { ignoreOrder: true }\n        )\n      );\n    });\n    setParsedSongs(validSongs);\n  }, [csvInput, setParsedSongs]);\n\n  const dialogContentProps: IDialogContentProps = {\n    type: DialogType.normal,\n    title: title || \"\",\n    closeButtonAriaLabel: \"Close\",\n    subText: message,\n  };\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit(parsedSongs);\n    setCSVInput([]);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    // Clear local state\n    setCSVInput([]);\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  const handleTextFieldChange = (\n    event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>,\n    newValue?: string\n  ) => {\n    const csvRows = getCSVRowsFromString(newValue || \"\").filter(\n      // Filter out empty rows\n      (row) => !areIdenticalArrays(row, [\"\"])\n    );\n    if (!areIdenticalArrays(csvInput, csvRows)) {\n      setCSVInput(csvRows);\n    }\n  };\n\n  const getErrorMessage = (): string => {\n    // Check which rows were translated to songs\n    const invalidRowErrors = csvInput\n      .map((row, index) =>\n        parsedSongs.some((song) => song.id === index + 1) ? undefined : { id: index + 1, row }\n      )\n      .filter((item) => typeof item !== \"undefined\");\n\n    // Show error if there were any invalid rows\n    if (invalidRowErrors.length > 0) {\n      if (invalidRowErrors.length === 1) {\n        const invalidRow = invalidRowErrors[0];\n        return `Row ${invalidRow?.id} could not be parsed into a song.`;\n      }\n      return `The following rows could not be parsed into songs: ${invalidRowErrors\n        .map((r) => r?.id)\n        .join(\", \")}`;\n    }\n    // Show error if there is any duplicate data (keyed on new_file_name)\n    const newFileNames = parsedSongs\n      .map((song) => song.new_file_name)\n      .filter((nfn, index, self) => self.indexOf(nfn) === index);\n\n    if (newFileNames.length !== parsedSongs.length) {\n      const duplicateNames = newFileNames\n        .map((newFileName) => {\n          return {\n            newFileName,\n            count: parsedSongs.filter((s) => s.new_file_name === newFileName).length,\n          };\n        })\n        .filter((item) => item.count > 1);\n      return `Duplicate data detected. ${duplicateNames\n        .map((n) => `\"${n.newFileName}\" found ${n.count} times`)\n        .join(\"; \")}`;\n    }\n\n    const songsAlreadyInFile = newFileNames.filter((fileName) => {\n      return existingSongs.some((song) => song.new_file_name === fileName);\n    });\n    if (songsAlreadyInFile.length > 0) {\n      return `Duplicate data detected: ${songsAlreadyInFile.map(\n        (s) => `\"${s}\" already exists in the dataset.`\n      )}`;\n    }\n\n    return \"\";\n  };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={handleCancel}\n      minWidth=\"80%\"\n      maxWidth=\"80%\"\n    >\n      <TextField\n        multiline\n        autoAdjustHeight\n        onChange={handleTextFieldChange}\n        onGetErrorMessage={getErrorMessage}\n      />\n      <h3>Parsed Songs:</h3>\n      <SongDataList\n        songs={parsedSongs}\n        onSongChange={(): boolean => false}\n        viewOptions={{\n          fadeInactive: false,\n          hiddenColumns: [songDataFields.ID],\n        }}\n      />\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" disabled={getErrorMessage() !== \"\"} />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\nexport default AddCSVSongsDialog;\n","/* eslint-disable react/require-default-props */\nimport {\n  Checkbox,\n  DefaultButton,\n  Dialog,\n  DialogFooter,\n  DialogType,\n  IDialogContentProps,\n  Label,\n  Pivot,\n  PivotItem,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\nimport * as React from \"react\";\nimport { expectedCSVColumnOrder } from \"../../../utils/CSVUtilities\";\nimport { SongDataColumn, ViewOptions } from \"../MusicTypes\";\n\ninterface Props {\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onSubmit: (newViewOptions: ViewOptions) => void;\n  onCancel?: () => void;\n  viewOptions: ViewOptions;\n}\n\nconst ViewOptionsDialog = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, viewOptions } = props;\n  const [pendingViewOptions, setPendingViewOptions] = React.useState(viewOptions);\n  const dialogContentProps: IDialogContentProps = {\n    type: DialogType.normal,\n    title: \"View Options\",\n    closeButtonAriaLabel: \"Close\",\n    // subText: 'Configure options for viewing music collection data',\n  };\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit(pendingViewOptions);\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setPendingViewOptions(viewOptions);\n\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  const handleFadeInactiveChange = (ev?: React.FormEvent<HTMLElement>, isChecked?: boolean) => {\n    setPendingViewOptions({\n      ...pendingViewOptions,\n      fadeInactive: !pendingViewOptions.fadeInactive,\n    });\n  };\n\n  const handleColumnCheckboxChange = (column: SongDataColumn) => {\n    const { hiddenColumns } = pendingViewOptions;\n    const columnIsHidden = hiddenColumns.some((c) => c.name === column.name);\n    if (columnIsHidden) {\n      setPendingViewOptions({\n        ...pendingViewOptions,\n        // Remove the new column from the hidden list\n        hiddenColumns: hiddenColumns.filter((c) => c.name !== column.name),\n      });\n    } else {\n      setPendingViewOptions({\n        ...pendingViewOptions,\n        hiddenColumns: [...hiddenColumns, column],\n      });\n    }\n  };\n\n  const pivotItemStyle = { marginTop: \"1em\" };\n\n  return (\n    <Dialog\n      hidden={!visible}\n      dialogContentProps={dialogContentProps}\n      onDismiss={handleCancel}\n      minWidth=\"80%\"\n      maxWidth=\"80%\"\n    >\n      <Pivot aria-label=\"View Options Pivot\">\n        <PivotItem headerText=\"General\">\n          <Stack tokens={{ childrenGap: \"1em\" }} style={pivotItemStyle}>\n            <Checkbox\n              label=\"Fade Inactive Song Rows\"\n              checked={pendingViewOptions.fadeInactive}\n              onChange={handleFadeInactiveChange}\n              styles={{ root: { marginTop: 10 } }}\n            />\n          </Stack>\n        </PivotItem>\n        <PivotItem headerText=\"Show/Hide Columns\">\n          <Label htmlFor=\"showHideColumnStack\">Visible Columns:</Label>\n          <Stack key=\"showHideColumnStack\" tokens={{ childrenGap: \"1em\" }} style={pivotItemStyle}>\n            {expectedCSVColumnOrder.map((col) => (\n              <Checkbox\n                key={col.name}\n                label={col.csvHeaderName}\n                checked={!pendingViewOptions.hiddenColumns.some((c) => c.name === col.name)}\n                onChange={() => handleColumnCheckboxChange(col)}\n              />\n            ))}\n          </Stack>\n        </PivotItem>\n      </Pivot>\n      <DialogFooter>\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\nexport default ViewOptionsDialog;\n","/* eslint-disable react/require-default-props */\nimport {\n  DefaultButton,\n  FontWeights,\n  getTheme,\n  mergeStyleSets,\n  Modal,\n  PrimaryButton,\n  Stack,\n} from \"@fluentui/react\";\nimport * as React from \"react\";\n\nconst theme = getTheme();\nconst contentStyles = mergeStyleSets({\n  header: [\n    theme.fonts.xLargePlus,\n    {\n      flex: \"1 1 auto\",\n      // borderTop: `4px solid ${theme.palette.themePrimary}`,\n      color: theme.palette.neutralPrimary,\n      display: \"flex\",\n      alignItems: \"center\",\n      fontWeight: FontWeights.semibold,\n      padding: \"12px 12px 14px 24px\",\n    },\n  ],\n});\n\ninterface Props {\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onSubmit: () => void;\n  onCancel?: () => void;\n  title: string;\n  subTitle?: string;\n  children?: React.ReactNode;\n}\n\nconst PopupModal = (props: Props): React.ReactElement => {\n  const { visible, setVisible, onSubmit, onCancel, title, children } = props;\n\n  const handleSubmit = () => {\n    setVisible(false);\n    onSubmit();\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    // Reset local state if necessary\n\n    if (typeof onCancel !== \"undefined\") {\n      onCancel();\n    }\n  };\n\n  return (\n    <Modal isOpen={visible} onDismiss={handleCancel} isBlocking={false}>\n      <div className={contentStyles.header}>\n        <span>{title}</span>\n      </div>\n      <Stack grow verticalAlign=\"space-between\">\n        {children}\n        <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: \"10px\" }}>\n          <PrimaryButton onClick={handleSubmit} text=\"Submit\" />\n          <DefaultButton onClick={handleCancel} text=\"Cancel\" />\n        </Stack>\n      </Stack>\n    </Modal>\n  );\n};\n\nexport default PopupModal;\n","import songDataFields from \"../constants/songDataFields.json\";\r\nimport { SongData, ViewOptions } from \"../features/music/MusicTypes\";\r\nimport { SortField } from \"../utils/ArrayUtilities\";\r\n\r\nexport const useMusicData = () => {\r\n  return {\r\n    isLoading: false,\r\n    cachedSongs: [] as SongData[],\r\n    songs: [] as SongData[],\r\n    saveFilePath: \"\",\r\n    sortColumns: [] as SortField[],\r\n    viewOptions: {\r\n      fadeInactive: false,\r\n      hiddenColumns: [songDataFields.ID],\r\n    } as ViewOptions,\r\n    updateSong: (song: SongData) => null,\r\n    toggleAndApplySortColumn: (column: string) => null,\r\n    loadDataFromCSV: () => null,\r\n    overwriteCachedSongs: () => null,\r\n    resetSorting: () => null,\r\n    resetSongsFromCached: () => null,\r\n    addNewSongs: (newSongs: SongData[]) => null,\r\n    setViewOptions: (options: ViewOptions) => null,\r\n  };\r\n};\r\n","import * as React from \"react\";\nimport { CommandBar, ICommandBarItemProps, IButtonProps } from \"@fluentui/react\";\nimport { useToasts } from \"react-toast-notifications\";\nimport ConfirmDialog from \"../../components/ConfirmDialog\";\nimport { saveCSVFile } from \"../../utils/FileUtilities\";\nimport AddCSVSongsDialog from \"./dialogs/AddCSVSongsDialog\";\nimport { SongData, ViewOptions } from \"./MusicTypes\";\nimport songDataFields from \"../../constants/songDataFields.json\";\nimport ViewOptionsDialog from \"./dialogs/ViewOptionsDialog\";\nimport PopupModal from \"./dialogs/PopupModal\";\nimport { useMusicData } from \"../../contexts/useMusicData\";\n\nconst overflowProps: IButtonProps = { ariaLabel: \"More commands\" };\n\nconst HeaderCommandBar = (): React.ReactElement => {\n  const {\n    saveFilePath,\n    songs,\n    sortColumns,\n    viewOptions,\n    cachedSongs,\n    toggleAndApplySortColumn,\n    loadDataFromCSV,\n    overwriteCachedSongs,\n    resetSorting,\n    resetSongsFromCached,\n    addNewSongs,\n    setViewOptions,\n  } = useMusicData();\n\n  const { addToast } = useToasts();\n\n  // Local state for tracking dialog state\n  const [cancelDialogIsOpen, setCancelDialogIsOpen] = React.useState(false);\n  const [addSongDialogIsOpen, setAddSongDialogIsOpen] = React.useState(false);\n  const [viewOptionsDialogIsOpen, setViewOptionsDialogIsOpen] = React.useState(false);\n  const [testIsOpen, setTestIsOpen] = React.useState(false);\n\n  const dataHasChanged = React.useMemo(\n    () => JSON.stringify(songs) !== JSON.stringify(cachedSongs),\n    [songs, cachedSongs]\n  );\n\n  const fileIsOpen = React.useMemo(() => saveFilePath !== \"\", [saveFilePath]);\n\n  const items: ICommandBarItemProps[] = [\n    {\n      key: \"upload\",\n      text: \"Open CSV\",\n      iconProps: { iconName: \"Database\" },\n      onClick: () => {\n        loadDataFromCSV();\n      },\n    },\n\n    {\n      key: \"save\",\n      text: \"Save CSV\",\n      iconProps: { iconName: \"PromotedDatabase\" },\n      onClick: () => {\n        saveCSVFile(saveFilePath, songs);\n        overwriteCachedSongs();\n        addToast(`Successfully saved changes to ${saveFilePath}`, {\n          appearance: \"success\",\n        });\n      },\n      disabled: !dataHasChanged,\n    },\n    {\n      key: \"newItem\",\n      text: \"Add Songs\",\n      cacheKey: \"myCacheKey\", // changing this key will invalidate this item's cache\n      iconProps: { iconName: \"Add\" }, // MusicNote is another good option\n      onClick: () => {\n        setAddSongDialogIsOpen(true);\n      },\n      disabled: !fileIsOpen,\n    },\n    {\n      key: \"sort\",\n      text: \"Sort\",\n      iconProps: { iconName: \"SortLines\" },\n      onClick: (): boolean => false,\n      subMenuProps: {\n        items: [\n          {\n            key: \"newestFirst\",\n            name: \"Newest First\",\n            text: \"Newest First\",\n            // This needs an ariaLabel since it's icon-only\n            ariaLabel: \"Newest First View\",\n            iconProps: { iconName: \"SortLines\" },\n            onClick: () => {\n              resetSorting();\n              toggleAndApplySortColumn(songDataFields.NEW_FILE_NAME.name);\n              toggleAndApplySortColumn(songDataFields.DATE.name);\n              // Toggle twice so that it switches to descending\n              toggleAndApplySortColumn(songDataFields.DATE.name);\n            },\n          },\n          {\n            key: \"clearSort\",\n            name: \"Clear Sort\",\n            text: \"Clear Sort Rules\",\n            // This needs an ariaLabel since it's icon-only\n            ariaLabel: \"Clear Sort Rules\",\n            iconProps: { iconName: \"RemoveFilter\" },\n            onClick: () => {\n              resetSorting();\n            },\n            disabled: sortColumns.length === 0,\n          },\n        ],\n      },\n    },\n    {\n      key: \"view\",\n      text: \"View Options\",\n      iconProps: { iconName: \"View\" },\n      onClick: () => {\n        setViewOptionsDialogIsOpen(true);\n      },\n    },\n    {\n      key: \"cancel\",\n      text: \"Cancel Changes\",\n      iconProps: { iconName: \"Cancel\" },\n      onClick: () => {\n        setCancelDialogIsOpen(true);\n      },\n      disabled: !dataHasChanged,\n    },\n  ];\n\n  const farItems: ICommandBarItemProps[] = [\n    {\n      key: \"tile\",\n      text: \"Grid view\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Grid view\",\n      iconOnly: true,\n      iconProps: { iconName: \"Tiles\" },\n      onClick: () => setTestIsOpen(true),\n    },\n    {\n      key: \"info\",\n      text: \"Info\",\n      // This needs an ariaLabel since it's icon-only\n      ariaLabel: \"Info\",\n      iconOnly: true,\n      iconProps: { iconName: \"Info\" },\n      onClick: () => console.log(\"Info\"),\n    },\n  ];\n\n  return (\n    <div>\n      <CommandBar\n        items={items}\n        overflowButtonProps={overflowProps}\n        farItems={farItems}\n        ariaLabel=\"Use left and right arrow keys to navigate between commands\"\n      />\n      <ConfirmDialog\n        visible={cancelDialogIsOpen}\n        setVisible={setCancelDialogIsOpen}\n        message=\"Are you sure you want to discard all changes?\"\n        confirmAltText=\"Yes, discard!\"\n        cancelAltText=\"No, go back!\"\n        onConfirm={() => {\n          resetSongsFromCached();\n          resetSorting();\n          addToast(\"Changes discarded\", { appearance: \"info\" });\n        }}\n      />\n      <AddCSVSongsDialog\n        title=\"Add Songs (CSV Text)\"\n        message=\"Paste CSV rows for new songs below.\"\n        visible={addSongDialogIsOpen}\n        setVisible={setAddSongDialogIsOpen}\n        onSubmit={(newSongs: SongData[]) => addNewSongs(newSongs)}\n        existingSongs={songs}\n      />\n      <ViewOptionsDialog\n        visible={viewOptionsDialogIsOpen}\n        setVisible={setViewOptionsDialogIsOpen}\n        onSubmit={(newOptions: ViewOptions) => {\n          setViewOptions(newOptions);\n        }}\n        viewOptions={viewOptions}\n      />\n      <PopupModal\n        visible={testIsOpen}\n        setVisible={setTestIsOpen}\n        onSubmit={() => console.log(\"a\")}\n        title=\"Test Popup\"\n      >\n        <span>Hello</span>\n      </PopupModal>\n    </div>\n  );\n};\nexport default HeaderCommandBar;\n","import React from \"react\";\nimport { IColumn, ProgressIndicator, ScrollablePane } from \"@fluentui/react\";\nimport HeaderCommandBar from \"./HeaderCommandBar\";\nimport SongDataList from \"./SongDataList\";\nimport { SongData } from \"./MusicTypes\";\nimport { useMusicData } from \"../../contexts/useMusicData\";\n\nconst MusicView = () => {\n  const {\n    isLoading,\n    // saveFilePath,\n    songs,\n    sortColumns,\n    viewOptions,\n    updateSong,\n    toggleAndApplySortColumn,\n  } = useMusicData();\n\n  // const windowTitle = `MC-Manager${saveFilePath === \"\" ? \"\" : ` - ${saveFilePath}`}`;\n\n  return (\n    /*\n     * Configuration for DetailsList with header came from from:\n     * https://stackoverflow.com/a/53527580/6509903\n     */\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n      }}\n    >\n      <div style={{ flex: 0 }}>\n        <HeaderCommandBar />\n      </div>\n      <div style={{ flex: 1, position: \"relative\" }}>\n        <ScrollablePane>\n          {isLoading ? (\n            <ProgressIndicator barHeight={4} />\n          ) : (\n            <SongDataList\n              songs={songs}\n              onSongChange={(newSong: SongData) => {\n                updateSong(newSong);\n              }}\n              onColumnClick={(ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => {\n                if (typeof column !== \"undefined\" && typeof column.fieldName !== \"undefined\") {\n                  toggleAndApplySortColumn(column.fieldName);\n                }\n              }}\n              sortColumns={sortColumns}\n              viewOptions={viewOptions}\n            />\n          )}\n        </ScrollablePane>\n      </div>\n    </div>\n  );\n};\n\nexport default MusicView;\n","import { initializeIcons } from \"@fluentui/react\";\nimport React from \"react\";\nimport { ToastProvider } from \"react-toast-notifications\";\n\nimport MusicView from \"../features/music/MusicView\";\n\n// See https://github.com/microsoft/fluentui/wiki/Using-icons\ninitializeIcons(/* optional base url */);\n\nexport default function Home(): JSX.Element {\n  return (\n    <ToastProvider>\n      <MusicView />\n    </ToastProvider>\n  );\n}\n","import React from \"react\";\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Home />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}